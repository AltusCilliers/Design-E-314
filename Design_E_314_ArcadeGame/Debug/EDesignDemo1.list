
EDesignDemo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004430  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004574  08004574  00020240  2**0
                  CONTENTS
  4 .ARM          00000000  08004574  08004574  00020240  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004574  08004574  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004574  08004574  00014574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800457c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000240  080047bc  00020240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  080047bc  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b285  00000000  00000000  00020269  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d95  00000000  00000000  0002b4ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa0  00000000  00000000  0002d288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b8  00000000  00000000  0002dd28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014052  00000000  00000000  0002e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a87  00000000  00000000  00042732  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e167  00000000  00000000  0004c1b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ba320  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a6c  00000000  00000000  000ba39c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000240 	.word	0x20000240
 8000128:	00000000 	.word	0x00000000
 800012c:	08004524 	.word	0x08004524

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000244 	.word	0x20000244
 8000148:	08004524 	.word	0x08004524

0800014c <calibration_sequence>:
UART_HandleTypeDef huart2;

uint8_t message[10] = "$1x______\n";

void calibration_sequence()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)"$23252162\n", 10, 50);
 8000152:	2332      	movs	r3, #50	; 0x32
 8000154:	220a      	movs	r2, #10
 8000156:	491b      	ldr	r1, [pc, #108]	; (80001c4 <calibration_sequence+0x78>)
 8000158:	481b      	ldr	r0, [pc, #108]	; (80001c8 <calibration_sequence+0x7c>)
 800015a:	f003 fffa 	bl	8004152 <HAL_UART_Transmit>
for (int j = 0; j<8; j++)
 800015e:	2300      	movs	r3, #0
 8000160:	607b      	str	r3, [r7, #4]
 8000162:	e01a      	b.n	800019a <calibration_sequence+0x4e>
  {
	message[2] = (j + 48);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	b2db      	uxtb	r3, r3
 8000168:	3330      	adds	r3, #48	; 0x30
 800016a:	b2da      	uxtb	r2, r3
 800016c:	4b17      	ldr	r3, [pc, #92]	; (80001cc <calibration_sequence+0x80>)
 800016e:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, 10, 50);
 8000170:	2332      	movs	r3, #50	; 0x32
 8000172:	220a      	movs	r2, #10
 8000174:	4915      	ldr	r1, [pc, #84]	; (80001cc <calibration_sequence+0x80>)
 8000176:	4814      	ldr	r0, [pc, #80]	; (80001c8 <calibration_sequence+0x7c>)
 8000178:	f003 ffeb 	bl	8004152 <HAL_UART_Transmit>
	set_LED_Column(j, 1);
 800017c:	2101      	movs	r1, #1
 800017e:	6878      	ldr	r0, [r7, #4]
 8000180:	f000 fb26 	bl	80007d0 <set_LED_Column>
	 HAL_Delay(1000);
 8000184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000188:	f002 f9ac 	bl	80024e4 <HAL_Delay>
	 set_LED_Column(j, 0);
 800018c:	2100      	movs	r1, #0
 800018e:	6878      	ldr	r0, [r7, #4]
 8000190:	f000 fb1e 	bl	80007d0 <set_LED_Column>
for (int j = 0; j<8; j++)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b07      	cmp	r3, #7
 800019e:	dde1      	ble.n	8000164 <calibration_sequence+0x18>
 }

display[0][0]=1;
 80001a0:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <calibration_sequence+0x84>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	701a      	strb	r2, [r3, #0]
display[0][7]=1;
 80001a6:	4b0a      	ldr	r3, [pc, #40]	; (80001d0 <calibration_sequence+0x84>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	71da      	strb	r2, [r3, #7]
display[7][0]=1;
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <calibration_sequence+0x84>)
 80001ae:	2201      	movs	r2, #1
 80001b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
display[7][7]=1;
 80001b4:	4b06      	ldr	r3, [pc, #24]	; (80001d0 <calibration_sequence+0x84>)
 80001b6:	2201      	movs	r2, #1
 80001b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 80001bc:	bf00      	nop
 80001be:	3708      	adds	r7, #8
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	0800453c 	.word	0x0800453c
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	20000000 	.word	0x20000000
 80001d0:	20000288 	.word	0x20000288

080001d4 <wait_screen>:

void wait_screen(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
//	for (int col; col<8;col++)
//	{
//		set_LED_Column(col, 0);
//	}
//
	for(int j=0; j<8;j++)
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e00a      	b.n	80001f6 <wait_screen+0x22>
			{
			setColumn(j,0);
 80001e0:	2100      	movs	r1, #0
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f000 fb14 	bl	8000810 <setColumn>
			setRow(j,0);
 80001e8:	2100      	movs	r1, #0
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f000 fb7a 	bl	80008e4 <setRow>
	for(int j=0; j<8;j++)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2b07      	cmp	r3, #7
 80001fa:	ddf1      	ble.n	80001e0 <wait_screen+0xc>
			}
	initialize_matrix();
 80001fc:	f000 fa56 	bl	80006ac <initialize_matrix>
	display[0][0]=1;
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <wait_screen+0x50>)
 8000202:	2201      	movs	r2, #1
 8000204:	701a      	strb	r2, [r3, #0]
	display[0][7]=1;
 8000206:	4b07      	ldr	r3, [pc, #28]	; (8000224 <wait_screen+0x50>)
 8000208:	2201      	movs	r2, #1
 800020a:	71da      	strb	r2, [r3, #7]
	display[7][0]=1;
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <wait_screen+0x50>)
 800020e:	2201      	movs	r2, #1
 8000210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	display[7][7]=1;
 8000214:	4b03      	ldr	r3, [pc, #12]	; (8000224 <wait_screen+0x50>)
 8000216:	2201      	movs	r2, #1
 8000218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	20000288 	.word	0x20000288

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f002 f8f7 	bl	8002420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f889 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f000 f973 	bl	8000520 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800023a:	f000 f947 	bl	80004cc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800023e:	f000 f8d9 	bl	80003f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000242:	f000 f915 	bl	8000470 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	initialize_matrix();
 8000246:	f000 fa31 	bl	80006ac <initialize_matrix>

	calibration_sequence();
 800024a:	f7ff ff7f 	bl	800014c <calibration_sequence>


	int8_t waitScreen=0;
 800024e:	2300      	movs	r3, #0
 8000250:	71fb      	strb	r3, [r7, #7]
	int8_t game_choose=0;
 8000252:	2300      	movs	r3, #0
 8000254:	71bb      	strb	r3, [r7, #6]

	game_choose = 3;
 8000256:	2303      	movs	r3, #3
 8000258:	71bb      	strb	r3, [r7, #6]


	i2cData[0]= 0x20;//set address to CTRL_REG_1
 800025a:	4b36      	ldr	r3, [pc, #216]	; (8000334 <main+0x10c>)
 800025c:	2220      	movs	r2, #32
 800025e:	701a      	strb	r2, [r3, #0]
	i2cData[1]= 0x47; //setup REG 1
 8000260:	4b34      	ldr	r3, [pc, #208]	; (8000334 <main+0x10c>)
 8000262:	2247      	movs	r2, #71	; 0x47
 8000264:	705a      	strb	r2, [r3, #1]
	//i2cData[1]= 0x57; //setup REG 1
	HAL_I2C_Master_Transmit(&hi2c1, 0x32, i2cData, 2, 10); //transmit
 8000266:	230a      	movs	r3, #10
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	2302      	movs	r3, #2
 800026c:	4a31      	ldr	r2, [pc, #196]	; (8000334 <main+0x10c>)
 800026e:	2132      	movs	r1, #50	; 0x32
 8000270:	4831      	ldr	r0, [pc, #196]	; (8000338 <main+0x110>)
 8000272:	f002 ff55 	bl	8003120 <HAL_I2C_Master_Transmit>

	i2cData[0]= 0x23;//set address to CTRL_REG_4
 8000276:	4b2f      	ldr	r3, [pc, #188]	; (8000334 <main+0x10c>)
 8000278:	2223      	movs	r2, #35	; 0x23
 800027a:	701a      	strb	r2, [r3, #0]
	i2cData[1]= 0x0;//setup REG 4
 800027c:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <main+0x10c>)
 800027e:	2200      	movs	r2, #0
 8000280:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0x32, i2cData, 2, 10);//transmit
 8000282:	230a      	movs	r3, #10
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2302      	movs	r3, #2
 8000288:	4a2a      	ldr	r2, [pc, #168]	; (8000334 <main+0x10c>)
 800028a:	2132      	movs	r1, #50	; 0x32
 800028c:	482a      	ldr	r0, [pc, #168]	; (8000338 <main+0x110>)
 800028e:	f002 ff47 	bl	8003120 <HAL_I2C_Master_Transmit>
			//			ay = i2cMazeData[2] + i2cMazeData[3];
//			ax = *((int8_t*)i2cMazeData) + (*((int8_t*)(i2cMazeData+1))<<8);
//			ay = *((int8_t*)(i2cMazeData+2))+(*((int8_t*)(i2cMazeData+3))<<8);


		 if((middle_pressed==1)&&(mazemenuflag==0))
 8000292:	4b2a      	ldr	r3, [pc, #168]	; (800033c <main+0x114>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b25b      	sxtb	r3, r3
 8000298:	2b01      	cmp	r3, #1
 800029a:	d115      	bne.n	80002c8 <main+0xa0>
 800029c:	4b28      	ldr	r3, [pc, #160]	; (8000340 <main+0x118>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d111      	bne.n	80002c8 <main+0xa0>
			  	{
			  		if(waitScreen==1)
 80002a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d104      	bne.n	80002b6 <main+0x8e>
			  		{
			  			game_choose = 2; //select tennis game
 80002ac:	2302      	movs	r3, #2
 80002ae:	71bb      	strb	r3, [r7, #6]
			  			waitScreen=0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	e005      	b.n	80002c2 <main+0x9a>
			  		}else if (waitScreen==0)
 80002b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d101      	bne.n	80002c2 <main+0x9a>
			  		{
			  			game_choose = 3; //go back to menu
 80002be:	2303      	movs	r3, #3
 80002c0:	71bb      	strb	r3, [r7, #6]
			  		}
			  		middle_pressed=0;
 80002c2:	4b1e      	ldr	r3, [pc, #120]	; (800033c <main+0x114>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	701a      	strb	r2, [r3, #0]

			  	}

			  	if (left_pressed==1) {
 80002c8:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <main+0x11c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d111      	bne.n	80002f6 <main+0xce>

			  		if(waitScreen==1) {
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d106      	bne.n	80002e8 <main+0xc0>
			  			game_choose = 1; //select maze game
 80002da:	2301      	movs	r3, #1
 80002dc:	71bb      	strb	r3, [r7, #6]
			  			mazemenuflag=1;
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <main+0x118>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	701a      	strb	r2, [r3, #0]
			  			waitScreen=0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	71fb      	strb	r3, [r7, #7]
			  		}
			  		if(game_choose==3 ){
 80002e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80002ec:	2b03      	cmp	r3, #3
 80002ee:	d102      	bne.n	80002f6 <main+0xce>
			  			left_pressed=0;
 80002f0:	4b14      	ldr	r3, [pc, #80]	; (8000344 <main+0x11c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	701a      	strb	r2, [r3, #0]
			  		}
			  	}

			  	if(game_choose==1)//maze game
 80002f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d102      	bne.n	8000304 <main+0xdc>
			  	{
			  		maze_game();
 80002fe:	f000 fbcf 	bl	8000aa0 <maze_game>
 8000302:	e7c6      	b.n	8000292 <main+0x6a>
			  	}else if(game_choose==2)//tennis game
 8000304:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000308:	2b02      	cmp	r3, #2
 800030a:	d102      	bne.n	8000312 <main+0xea>
			  	{
			  		tennis_game();
 800030c:	f001 fb64 	bl	80019d8 <tennis_game>
 8000310:	e7bf      	b.n	8000292 <main+0x6a>
			  	}else if(game_choose==3)//menu
 8000312:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000316:	2b03      	cmp	r3, #3
 8000318:	d1bb      	bne.n	8000292 <main+0x6a>
			  	{
			  		if(waitScreen==0)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d1b7      	bne.n	8000292 <main+0x6a>
			  		{
			  			maze_gameStop();
 8000322:	f001 f825 	bl	8001370 <maze_gameStop>
			  			tennis_gameStop();
 8000326:	f002 f837 	bl	8002398 <tennis_gameStop>
			  			waitScreen=1;
 800032a:	2301      	movs	r3, #1
 800032c:	71fb      	strb	r3, [r7, #7]
			  			wait_screen();
 800032e:	f7ff ff51 	bl	80001d4 <wait_screen>
		 if((middle_pressed==1)&&(mazemenuflag==0))
 8000332:	e7ae      	b.n	8000292 <main+0x6a>
 8000334:	200003a0 	.word	0x200003a0
 8000338:	2000030c 	.word	0x2000030c
 800033c:	200003ac 	.word	0x200003ac
 8000340:	2000026a 	.word	0x2000026a
 8000344:	20000308 	.word	0x20000308

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b094      	sub	sp, #80	; 0x50
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000352:	2228      	movs	r2, #40	; 0x28
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f004 f8dc 	bl	8004514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000378:	2302      	movs	r3, #2
 800037a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037c:	2301      	movs	r3, #1
 800037e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000380:	2310      	movs	r3, #16
 8000382:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000384:	2302      	movs	r3, #2
 8000386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000388:	2300      	movs	r3, #0
 800038a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800038c:	2300      	movs	r3, #0
 800038e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000394:	4618      	mov	r0, r3
 8000396:	f003 f9bd 	bl	8003714 <HAL_RCC_OscConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80003a0:	f000 f97e 	bl	80006a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a4:	230f      	movs	r3, #15
 80003a6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a8:	2302      	movs	r3, #2
 80003aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ba:	f107 0314 	add.w	r3, r7, #20
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f003 fc27 	bl	8003c14 <HAL_RCC_ClockConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003cc:	f000 f968 	bl	80006a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003d0:	2302      	movs	r3, #2
 80003d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 fdb6 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80003e6:	f000 f95b 	bl	80006a0 <Error_Handler>
  }
}
 80003ea:	bf00      	nop
 80003ec:	3750      	adds	r7, #80	; 0x50
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_ADC1_Init+0x74>)
 8000406:	4a19      	ldr	r2, [pc, #100]	; (800046c <MX_ADC1_Init+0x78>)
 8000408:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800040a:	4b17      	ldr	r3, [pc, #92]	; (8000468 <MX_ADC1_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000410:	4b15      	ldr	r3, [pc, #84]	; (8000468 <MX_ADC1_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_ADC1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_ADC1_Init+0x74>)
 800041e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000422:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000424:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MX_ADC1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_ADC1_Init+0x74>)
 800042c:	2201      	movs	r2, #1
 800042e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000430:	480d      	ldr	r0, [pc, #52]	; (8000468 <MX_ADC1_Init+0x74>)
 8000432:	f002 f879 	bl	8002528 <HAL_ADC_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800043c:	f000 f930 	bl	80006a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000440:	2300      	movs	r3, #0
 8000442:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000444:	2301      	movs	r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4619      	mov	r1, r3
 8000450:	4805      	ldr	r0, [pc, #20]	; (8000468 <MX_ADC1_Init+0x74>)
 8000452:	f002 f941 	bl	80026d8 <HAL_ADC_ConfigChannel>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800045c:	f000 f920 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000364 	.word	0x20000364
 800046c:	40012400 	.word	0x40012400

08000470 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <MX_I2C1_Init+0x50>)
 8000476:	4a13      	ldr	r2, [pc, #76]	; (80004c4 <MX_I2C1_Init+0x54>)
 8000478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_I2C1_Init+0x50>)
 800047c:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <MX_I2C1_Init+0x58>)
 800047e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_I2C1_Init+0x50>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_I2C1_Init+0x50>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_I2C1_Init+0x50>)
 800048e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000492:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <MX_I2C1_Init+0x50>)
 8000496:	2200      	movs	r2, #0
 8000498:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <MX_I2C1_Init+0x50>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <MX_I2C1_Init+0x50>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_I2C1_Init+0x50>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ac:	4804      	ldr	r0, [pc, #16]	; (80004c0 <MX_I2C1_Init+0x50>)
 80004ae:	f002 fcff 	bl	8002eb0 <HAL_I2C_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004b8:	f000 f8f2 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000030c 	.word	0x2000030c
 80004c4:	40005400 	.word	0x40005400
 80004c8:	000186a0 	.word	0x000186a0

080004cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004d2:	4a12      	ldr	r2, [pc, #72]	; (800051c <MX_USART2_UART_Init+0x50>)
 80004d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004f2:	2208      	movs	r2, #8
 80004f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 8000504:	f003 fdd8 	bl	80040b8 <HAL_UART_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800050e:	f000 f8c7 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	200002c8 	.word	0x200002c8
 800051c:	40004400 	.word	0x40004400

08000520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000534:	4b55      	ldr	r3, [pc, #340]	; (800068c <MX_GPIO_Init+0x16c>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a54      	ldr	r2, [pc, #336]	; (800068c <MX_GPIO_Init+0x16c>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b52      	ldr	r3, [pc, #328]	; (800068c <MX_GPIO_Init+0x16c>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0310 	and.w	r3, r3, #16
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054c:	4b4f      	ldr	r3, [pc, #316]	; (800068c <MX_GPIO_Init+0x16c>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a4e      	ldr	r2, [pc, #312]	; (800068c <MX_GPIO_Init+0x16c>)
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b4c      	ldr	r3, [pc, #304]	; (800068c <MX_GPIO_Init+0x16c>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0320 	and.w	r3, r3, #32
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b49      	ldr	r3, [pc, #292]	; (800068c <MX_GPIO_Init+0x16c>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a48      	ldr	r2, [pc, #288]	; (800068c <MX_GPIO_Init+0x16c>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b46      	ldr	r3, [pc, #280]	; (800068c <MX_GPIO_Init+0x16c>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b43      	ldr	r3, [pc, #268]	; (800068c <MX_GPIO_Init+0x16c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a42      	ldr	r2, [pc, #264]	; (800068c <MX_GPIO_Init+0x16c>)
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b40      	ldr	r3, [pc, #256]	; (800068c <MX_GPIO_Init+0x16c>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG1_Pin|COL4_Pin|COL5_Pin|DEBUG3_Pin 
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 51f7 	mov.w	r1, #7904	; 0x1ee0
 800059a:	483d      	ldr	r0, [pc, #244]	; (8000690 <MX_GPIO_Init+0x170>)
 800059c:	f002 fc4d 	bl	8002e3a <HAL_GPIO_WritePin>
                          |COL6_Pin|ROW4_Pin|ROW3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COL7_Pin|ROW2_Pin|ROW1_Pin|DEBUG2_Pin 
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80005a6:	483b      	ldr	r0, [pc, #236]	; (8000694 <MX_GPIO_Init+0x174>)
 80005a8:	f002 fc47 	bl	8002e3a <HAL_GPIO_WritePin>
                          |ROW0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|ROW7_Pin|ROW6_Pin|ROW5_Pin 
 80005ac:	2200      	movs	r2, #0
 80005ae:	f64f 0126 	movw	r1, #63526	; 0xf826
 80005b2:	4839      	ldr	r0, [pc, #228]	; (8000698 <MX_GPIO_Init+0x178>)
 80005b4:	f002 fc41 	bl	8002e3a <HAL_GPIO_WritePin>
                          |COL3_Pin|COL2_Pin|COL1_Pin|DEBUG4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005be:	4b37      	ldr	r3, [pc, #220]	; (800069c <MX_GPIO_Init+0x17c>)
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	4619      	mov	r1, r3
 80005cc:	4831      	ldr	r0, [pc, #196]	; (8000694 <MX_GPIO_Init+0x174>)
 80005ce:	f002 fac3 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : S5_Pin S2_Pin */
  GPIO_InitStruct.Pin = S5_Pin|S2_Pin;
 80005d2:	2303      	movs	r3, #3
 80005d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	482b      	ldr	r0, [pc, #172]	; (8000694 <MX_GPIO_Init+0x174>)
 80005e6:	f002 fab7 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : S4_Pin S3_Pin */
  GPIO_InitStruct.Pin = S4_Pin|S3_Pin;
 80005ea:	2312      	movs	r3, #18
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	4824      	ldr	r0, [pc, #144]	; (8000690 <MX_GPIO_Init+0x170>)
 80005fe:	f002 faab 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG1_Pin COL4_Pin COL5_Pin DEBUG3_Pin 
                           COL6_Pin ROW4_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = DEBUG1_Pin|COL4_Pin|COL5_Pin|DEBUG3_Pin 
 8000602:	f44f 53f7 	mov.w	r3, #7904	; 0x1ee0
 8000606:	613b      	str	r3, [r7, #16]
                          |COL6_Pin|ROW4_Pin|ROW3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2302      	movs	r3, #2
 8000612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4619      	mov	r1, r3
 800061a:	481d      	ldr	r0, [pc, #116]	; (8000690 <MX_GPIO_Init+0x170>)
 800061c:	f002 fa9c 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL7_Pin ROW2_Pin ROW1_Pin DEBUG2_Pin 
                           ROW0_Pin */
  GPIO_InitStruct.Pin = COL7_Pin|ROW2_Pin|ROW1_Pin|DEBUG2_Pin 
 8000620:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8000624:	613b      	str	r3, [r7, #16]
                          |ROW0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2302      	movs	r3, #2
 8000630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	4619      	mov	r1, r3
 8000638:	4816      	ldr	r0, [pc, #88]	; (8000694 <MX_GPIO_Init+0x174>)
 800063a:	f002 fa8d 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : S1_Pin */
  GPIO_InitStruct.Pin = S1_Pin;
 800063e:	2301      	movs	r3, #1
 8000640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	4619      	mov	r1, r3
 8000650:	4811      	ldr	r0, [pc, #68]	; (8000698 <MX_GPIO_Init+0x178>)
 8000652:	f002 fa81 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin ROW7_Pin ROW6_Pin ROW5_Pin 
                           COL3_Pin COL2_Pin COL1_Pin DEBUG4_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|ROW7_Pin|ROW6_Pin|ROW5_Pin 
 8000656:	f64f 0326 	movw	r3, #63526	; 0xf826
 800065a:	613b      	str	r3, [r7, #16]
                          |COL3_Pin|COL2_Pin|COL1_Pin|DEBUG4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2302      	movs	r3, #2
 8000666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	480a      	ldr	r0, [pc, #40]	; (8000698 <MX_GPIO_Init+0x178>)
 8000670:	f002 fa72 	bl	8002b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2028      	movs	r0, #40	; 0x28
 800067a:	f002 fa36 	bl	8002aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800067e:	2028      	movs	r0, #40	; 0x28
 8000680:	f002 fa4f 	bl	8002b22 <HAL_NVIC_EnableIRQ>

}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800
 8000694:	40011000 	.word	0x40011000
 8000698:	40010c00 	.word	0x40010c00
 800069c:	10110000 	.word	0x10110000

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <initialize_matrix>:
	display[7][0]=1;
	display[7][7]=1;
}

void initialize_matrix()
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
	for (int j = 0; j<8; j++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	e013      	b.n	80006e0 <initialize_matrix+0x34>
	  {
		 for (int k = 0; k<8;k++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	e00a      	b.n	80006d4 <initialize_matrix+0x28>
		  {
			 display[j][k]=0;
 80006be:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <initialize_matrix+0x44>)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	441a      	add	r2, r3
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	4413      	add	r3, r2
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
		 for (int k = 0; k<8;k++)
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2b07      	cmp	r3, #7
 80006d8:	ddf1      	ble.n	80006be <initialize_matrix+0x12>
	for (int j = 0; j<8; j++)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3301      	adds	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	dde8      	ble.n	80006b8 <initialize_matrix+0xc>
		  }
	  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000288 	.word	0x20000288

080006f4 <reset_matrix>:

void reset_matrix()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	for(int j=0; j<8;j++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	e00a      	b.n	8000716 <reset_matrix+0x22>
		{
		setColumn(j,0);
 8000700:	2100      	movs	r1, #0
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f884 	bl	8000810 <setColumn>
		setRow(j,0);
 8000708:	2100      	movs	r1, #0
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f000 f8ea 	bl	80008e4 <setRow>
	for(int j=0; j<8;j++)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3301      	adds	r3, #1
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b07      	cmp	r3, #7
 800071a:	ddf1      	ble.n	8000700 <reset_matrix+0xc>
		}
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <display_matrix>:
//	}
//
//}

void display_matrix()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
reset_matrix();
 800072a:	f7ff ffe3 	bl	80006f4 <reset_matrix>
setRow(columnCounter,1);
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <display_matrix+0xa4>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2101      	movs	r1, #1
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f8d5 	bl	80008e4 <setRow>
int8_t emptyLEDS = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	71fb      	strb	r3, [r7, #7]
	for(int row=0; row<8;row++)
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	e023      	b.n	800078c <display_matrix+0x68>
	{
		if((display[columnCounter][row])!=0)
 8000744:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <display_matrix+0xa4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a20      	ldr	r2, [pc, #128]	; (80007cc <display_matrix+0xa8>)
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	441a      	add	r2, r3
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	4413      	add	r3, r2
 8000752:	f993 3000 	ldrsb.w	r3, [r3]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d004      	beq.n	8000764 <display_matrix+0x40>
		{
			setColumn(row,1);
 800075a:	2101      	movs	r1, #1
 800075c:	6838      	ldr	r0, [r7, #0]
 800075e:	f000 f857 	bl	8000810 <setColumn>
 8000762:	e010      	b.n	8000786 <display_matrix+0x62>
			//display_LED(row,columnCounter);
		}else if ((display[columnCounter][row])==0)
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <display_matrix+0xa4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a18      	ldr	r2, [pc, #96]	; (80007cc <display_matrix+0xa8>)
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	441a      	add	r2, r3
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	4413      	add	r3, r2
 8000772:	f993 3000 	ldrsb.w	r3, [r3]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d105      	bne.n	8000786 <display_matrix+0x62>
		{
			//setRow(row,0);
			emptyLEDS++;
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	3301      	adds	r3, #1
 8000782:	b2db      	uxtb	r3, r3
 8000784:	71fb      	strb	r3, [r7, #7]
	for(int row=0; row<8;row++)
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	2b07      	cmp	r3, #7
 8000790:	ddd8      	ble.n	8000744 <display_matrix+0x20>
		}

	}
	if(emptyLEDS == 8)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	2b08      	cmp	r3, #8
 8000798:	d105      	bne.n	80007a6 <display_matrix+0x82>
	{
		setRow(columnCounter,0);
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <display_matrix+0xa4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f89f 	bl	80008e4 <setRow>
	}
	if(columnCounter>=7)
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <display_matrix+0xa4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	dd03      	ble.n	80007b6 <display_matrix+0x92>
	{
		columnCounter=0;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <display_matrix+0xa4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
	}else
	{
	columnCounter++;
	}

}
 80007b4:	e004      	b.n	80007c0 <display_matrix+0x9c>
	columnCounter++;
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <display_matrix+0xa4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	4a02      	ldr	r2, [pc, #8]	; (80007c8 <display_matrix+0xa4>)
 80007be:	6013      	str	r3, [r2, #0]
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000025c 	.word	0x2000025c
 80007cc:	20000288 	.word	0x20000288

080007d0 <set_LED_Column>:




void set_LED_Column(int x, int status)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	for (int row = 0; row < 8; row++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	e00c      	b.n	80007fa <set_LED_Column+0x2a>
		display[row][x]=status;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b259      	sxtb	r1, r3
 80007e4:	4a09      	ldr	r2, [pc, #36]	; (800080c <set_LED_Column+0x3c>)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	441a      	add	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	460a      	mov	r2, r1
 80007f2:	701a      	strb	r2, [r3, #0]
	for (int row = 0; row < 8; row++) {
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b07      	cmp	r3, #7
 80007fe:	ddef      	ble.n	80007e0 <set_LED_Column+0x10>
	}
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000288 	.word	0x20000288

08000810 <setColumn>:
		display[y][column]=status;
	}
}

void setColumn(int x, int y)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
	switch(x)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b07      	cmp	r3, #7
 800081e:	d857      	bhi.n	80008d0 <setColumn+0xc0>
 8000820:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <setColumn+0x18>)
 8000822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000826:	bf00      	nop
 8000828:	08000849 	.word	0x08000849
 800082c:	08000859 	.word	0x08000859
 8000830:	0800086b 	.word	0x0800086b
 8000834:	0800087d 	.word	0x0800087d
 8000838:	0800088f 	.word	0x0800088f
 800083c:	0800089f 	.word	0x0800089f
 8000840:	080008af 	.word	0x080008af
 8000844:	080008c1 	.word	0x080008c1
	{
	case 0:
		HAL_GPIO_WritePin(GPIOB, COL0_Pin, y);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	461a      	mov	r2, r3
 800084e:	2102      	movs	r1, #2
 8000850:	4821      	ldr	r0, [pc, #132]	; (80008d8 <setColumn+0xc8>)
 8000852:	f002 faf2 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 8000856:	e03b      	b.n	80008d0 <setColumn+0xc0>

	case 1:
		HAL_GPIO_WritePin(GPIOB, COL1_Pin, y);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000862:	481d      	ldr	r0, [pc, #116]	; (80008d8 <setColumn+0xc8>)
 8000864:	f002 fae9 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 8000868:	e032      	b.n	80008d0 <setColumn+0xc0>

	case 2:
		HAL_GPIO_WritePin(GPIOB, COL2_Pin, y);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	461a      	mov	r2, r3
 8000870:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000874:	4818      	ldr	r0, [pc, #96]	; (80008d8 <setColumn+0xc8>)
 8000876:	f002 fae0 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 800087a:	e029      	b.n	80008d0 <setColumn+0xc0>

	case 3:
		HAL_GPIO_WritePin(GPIOB, COL3_Pin, y);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <setColumn+0xc8>)
 8000888:	f002 fad7 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 800088c:	e020      	b.n	80008d0 <setColumn+0xc0>

	case 4:
		HAL_GPIO_WritePin(GPIOA, COL4_Pin, y);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	4811      	ldr	r0, [pc, #68]	; (80008dc <setColumn+0xcc>)
 8000898:	f002 facf 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 800089c:	e018      	b.n	80008d0 <setColumn+0xc0>

	case 5:
		HAL_GPIO_WritePin(GPIOA, COL5_Pin, y);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <setColumn+0xcc>)
 80008a8:	f002 fac7 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 80008ac:	e010      	b.n	80008d0 <setColumn+0xc0>

	case 6:
		HAL_GPIO_WritePin(GPIOA, COL6_Pin, y);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b8:	4808      	ldr	r0, [pc, #32]	; (80008dc <setColumn+0xcc>)
 80008ba:	f002 fabe 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 80008be:	e007      	b.n	80008d0 <setColumn+0xc0>

	case 7:
		HAL_GPIO_WritePin(GPIOC, COL7_Pin, y);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	461a      	mov	r2, r3
 80008c6:	2110      	movs	r1, #16
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <setColumn+0xd0>)
 80008ca:	f002 fab6 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 80008ce:	bf00      	nop
	}
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40010c00 	.word	0x40010c00
 80008dc:	40010800 	.word	0x40010800
 80008e0:	40011000 	.word	0x40011000

080008e4 <setRow>:

void setRow(int x, int y)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	switch(x)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b07      	cmp	r3, #7
 80008f2:	d858      	bhi.n	80009a6 <setRow+0xc2>
 80008f4:	a201      	add	r2, pc, #4	; (adr r2, 80008fc <setRow+0x18>)
 80008f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fa:	bf00      	nop
 80008fc:	0800091d 	.word	0x0800091d
 8000900:	0800092f 	.word	0x0800092f
 8000904:	0800093f 	.word	0x0800093f
 8000908:	0800094f 	.word	0x0800094f
 800090c:	08000961 	.word	0x08000961
 8000910:	08000973 	.word	0x08000973
 8000914:	08000985 	.word	0x08000985
 8000918:	08000997 	.word	0x08000997
	{
	case 0:
		HAL_GPIO_WritePin(GPIOC, ROW0_Pin, y);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000926:	4822      	ldr	r0, [pc, #136]	; (80009b0 <setRow+0xcc>)
 8000928:	f002 fa87 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 800092c:	e03b      	b.n	80009a6 <setRow+0xc2>

	case 1:
		HAL_GPIO_WritePin(GPIOC, ROW1_Pin, y);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	461a      	mov	r2, r3
 8000934:	2140      	movs	r1, #64	; 0x40
 8000936:	481e      	ldr	r0, [pc, #120]	; (80009b0 <setRow+0xcc>)
 8000938:	f002 fa7f 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 800093c:	e033      	b.n	80009a6 <setRow+0xc2>

	case 2:
		HAL_GPIO_WritePin(GPIOC, ROW2_Pin, y);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	2120      	movs	r1, #32
 8000946:	481a      	ldr	r0, [pc, #104]	; (80009b0 <setRow+0xcc>)
 8000948:	f002 fa77 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 800094c:	e02b      	b.n	80009a6 <setRow+0xc2>

	case 3:
		HAL_GPIO_WritePin(GPIOA, ROW3_Pin, y);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000958:	4816      	ldr	r0, [pc, #88]	; (80009b4 <setRow+0xd0>)
 800095a:	f002 fa6e 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 800095e:	e022      	b.n	80009a6 <setRow+0xc2>

	case 4:
		HAL_GPIO_WritePin(GPIOA, ROW4_Pin, y);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	461a      	mov	r2, r3
 8000966:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800096a:	4812      	ldr	r0, [pc, #72]	; (80009b4 <setRow+0xd0>)
 800096c:	f002 fa65 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 8000970:	e019      	b.n	80009a6 <setRow+0xc2>

	case 5:
		HAL_GPIO_WritePin(GPIOB, ROW5_Pin, y);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097c:	480e      	ldr	r0, [pc, #56]	; (80009b8 <setRow+0xd4>)
 800097e:	f002 fa5c 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 8000982:	e010      	b.n	80009a6 <setRow+0xc2>

	case 6:
		HAL_GPIO_WritePin(GPIOB, ROW6_Pin, y);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	461a      	mov	r2, r3
 800098a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <setRow+0xd4>)
 8000990:	f002 fa53 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 8000994:	e007      	b.n	80009a6 <setRow+0xc2>

	case 7:
		HAL_GPIO_WritePin(GPIOB, ROW7_Pin, y);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	2104      	movs	r1, #4
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <setRow+0xd4>)
 80009a0:	f002 fa4b 	bl	8002e3a <HAL_GPIO_WritePin>
		break;
 80009a4:	bf00      	nop
	}
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40011000 	.word	0x40011000
 80009b4:	40010800 	.word	0x40010800
 80009b8:	40010c00 	.word	0x40010c00

080009bc <construct_maze_game>:

uint8_t i2cMazeData[10];

//Constructor for maze game
void construct_maze_game(int8_t maze[8][8])
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

	ball_visible=1;
 80009c4:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <construct_maze_game+0xc4>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
	goal_visible=1;
 80009ca:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <construct_maze_game+0xc8>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]
	player_toggle=1;
 80009d0:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <construct_maze_game+0xcc>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
	end_toggle=1;
 80009d6:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <construct_maze_game+0xd0>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
	end_visible=1;
 80009dc:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <construct_maze_game+0xd4>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
	uart_transmit_ball_pos = 1;
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <construct_maze_game+0xd8>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]



	for (int col; col<8;col++)
 80009e8:	e006      	b.n	80009f8 <construct_maze_game+0x3c>
	{
		set_LED_Column(col, 0);
 80009ea:	2100      	movs	r1, #0
 80009ec:	6978      	ldr	r0, [r7, #20]
 80009ee:	f7ff feef 	bl	80007d0 <set_LED_Column>
	for (int col; col<8;col++)
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3301      	adds	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	2b07      	cmp	r3, #7
 80009fc:	ddf5      	ble.n	80009ea <construct_maze_game+0x2e>
	}

	for (int row = 0; row < 8; row++) {
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	e01b      	b.n	8000a3c <construct_maze_game+0x80>
		for (int col = 0; col < 8; col++) {
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	e012      	b.n	8000a30 <construct_maze_game+0x74>
			display[row][col] = maze[row][col];
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	441a      	add	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4413      	add	r3, r2
 8000a16:	f993 1000 	ldrsb.w	r1, [r3]
 8000a1a:	4a1f      	ldr	r2, [pc, #124]	; (8000a98 <construct_maze_game+0xdc>)
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	441a      	add	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4413      	add	r3, r2
 8000a26:	460a      	mov	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
		for (int col = 0; col < 8; col++) {
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b07      	cmp	r3, #7
 8000a34:	dde9      	ble.n	8000a0a <construct_maze_game+0x4e>
	for (int row = 0; row < 8; row++) {
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	2b07      	cmp	r3, #7
 8000a40:	dde0      	ble.n	8000a04 <construct_maze_game+0x48>
		}
	}


	ball.Xpos=0;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <construct_maze_game+0xe0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
	ball.Ypos=0;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <construct_maze_game+0xe0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	705a      	strb	r2, [r3, #1]
	ball.Xprev=0;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <construct_maze_game+0xe0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	709a      	strb	r2, [r3, #2]
	ball.Yprev=0;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <construct_maze_game+0xe0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	70da      	strb	r2, [r3, #3]

	display[ball.Xpos][ball.Ypos]=1;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <construct_maze_game+0xe0>)
 8000a5c:	f993 3000 	ldrsb.w	r3, [r3]
 8000a60:	4618      	mov	r0, r3
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <construct_maze_game+0xe0>)
 8000a64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <construct_maze_game+0xdc>)
 8000a6c:	00c3      	lsls	r3, r0, #3
 8000a6e:	4413      	add	r3, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000212 	.word	0x20000212
 8000a84:	20000213 	.word	0x20000213
 8000a88:	2000020e 	.word	0x2000020e
 8000a8c:	2000020d 	.word	0x2000020d
 8000a90:	2000021f 	.word	0x2000021f
 8000a94:	2000020f 	.word	0x2000020f
 8000a98:	20000288 	.word	0x20000288
 8000a9c:	200003b4 	.word	0x200003b4

08000aa0 <maze_game>:

void maze_game()
{
 8000aa0:	b598      	push	{r3, r4, r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	if (maze_game_counter == 0)
 8000aa4:	4baf      	ldr	r3, [pc, #700]	; (8000d64 <maze_game+0x2c4>)
 8000aa6:	cb18      	ldmia	r3, {r3, r4}
 8000aa8:	4323      	orrs	r3, r4
 8000aaa:	d120      	bne.n	8000aee <maze_game+0x4e>
	{
		if (number_flag==0)
 8000aac:	4bae      	ldr	r3, [pc, #696]	; (8000d68 <maze_game+0x2c8>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f040 808d 	bne.w	8000bd0 <maze_game+0x130>
		{
			display_maze_number(1); //displays maze1
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f000 fba8 	bl	800120c <display_maze_number>
			HAL_GPIO_WritePin(GPIOA, DEBUG1_Pin, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2120      	movs	r1, #32
 8000ac0:	48aa      	ldr	r0, [pc, #680]	; (8000d6c <maze_game+0x2cc>)
 8000ac2:	f002 f9ba 	bl	8002e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, DEBUG2_Pin, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	48a9      	ldr	r0, [pc, #676]	; (8000d70 <maze_game+0x2d0>)
 8000acc:	f002 f9b5 	bl	8002e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, DEBUG3_Pin, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad6:	48a5      	ldr	r0, [pc, #660]	; (8000d6c <maze_game+0x2cc>)
 8000ad8:	f002 f9af 	bl	8002e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, DEBUG4_Pin, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2120      	movs	r1, #32
 8000ae0:	48a4      	ldr	r0, [pc, #656]	; (8000d74 <maze_game+0x2d4>)
 8000ae2:	f002 f9aa 	bl	8002e3a <HAL_GPIO_WritePin>
			number_flag=1;
 8000ae6:	4ba0      	ldr	r3, [pc, #640]	; (8000d68 <maze_game+0x2c8>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	e070      	b.n	8000bd0 <maze_game+0x130>
		}
	}else if (maze_game_counter == 1)
 8000aee:	4b9d      	ldr	r3, [pc, #628]	; (8000d64 <maze_game+0x2c4>)
 8000af0:	cb18      	ldmia	r3, {r3, r4}
 8000af2:	2c00      	cmp	r4, #0
 8000af4:	bf08      	it	eq
 8000af6:	2b01      	cmpeq	r3, #1
 8000af8:	d11f      	bne.n	8000b3a <maze_game+0x9a>
	{
		if (number_flag==0)
 8000afa:	4b9b      	ldr	r3, [pc, #620]	; (8000d68 <maze_game+0x2c8>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d166      	bne.n	8000bd0 <maze_game+0x130>
		{
			display_maze_number(2); //displays maze1
 8000b02:	2002      	movs	r0, #2
 8000b04:	f000 fb82 	bl	800120c <display_maze_number>
			HAL_GPIO_WritePin(GPIOC, DEBUG2_Pin, 1);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	4898      	ldr	r0, [pc, #608]	; (8000d70 <maze_game+0x2d0>)
 8000b0e:	f002 f994 	bl	8002e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, DEBUG1_Pin, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2120      	movs	r1, #32
 8000b16:	4895      	ldr	r0, [pc, #596]	; (8000d6c <maze_game+0x2cc>)
 8000b18:	f002 f98f 	bl	8002e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, DEBUG3_Pin, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b22:	4892      	ldr	r0, [pc, #584]	; (8000d6c <maze_game+0x2cc>)
 8000b24:	f002 f989 	bl	8002e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, DEBUG4_Pin, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2120      	movs	r1, #32
 8000b2c:	4891      	ldr	r0, [pc, #580]	; (8000d74 <maze_game+0x2d4>)
 8000b2e:	f002 f984 	bl	8002e3a <HAL_GPIO_WritePin>
			number_flag=1;
 8000b32:	4b8d      	ldr	r3, [pc, #564]	; (8000d68 <maze_game+0x2c8>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	e04a      	b.n	8000bd0 <maze_game+0x130>
		}
	}else if (maze_game_counter == 2)
 8000b3a:	4b8a      	ldr	r3, [pc, #552]	; (8000d64 <maze_game+0x2c4>)
 8000b3c:	cb18      	ldmia	r3, {r3, r4}
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	bf08      	it	eq
 8000b42:	2b02      	cmpeq	r3, #2
 8000b44:	d11f      	bne.n	8000b86 <maze_game+0xe6>
	{
		if (number_flag==0)
 8000b46:	4b88      	ldr	r3, [pc, #544]	; (8000d68 <maze_game+0x2c8>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d140      	bne.n	8000bd0 <maze_game+0x130>
		{
			display_maze_number(3); //displays maze1
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 fb5c 	bl	800120c <display_maze_number>
			HAL_GPIO_WritePin(GPIOA, DEBUG3_Pin, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5a:	4884      	ldr	r0, [pc, #528]	; (8000d6c <maze_game+0x2cc>)
 8000b5c:	f002 f96d 	bl	8002e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, DEBUG1_Pin, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2120      	movs	r1, #32
 8000b64:	4881      	ldr	r0, [pc, #516]	; (8000d6c <maze_game+0x2cc>)
 8000b66:	f002 f968 	bl	8002e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, DEBUG2_Pin, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	4880      	ldr	r0, [pc, #512]	; (8000d70 <maze_game+0x2d0>)
 8000b70:	f002 f963 	bl	8002e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, DEBUG4_Pin, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2120      	movs	r1, #32
 8000b78:	487e      	ldr	r0, [pc, #504]	; (8000d74 <maze_game+0x2d4>)
 8000b7a:	f002 f95e 	bl	8002e3a <HAL_GPIO_WritePin>
			number_flag=1;
 8000b7e:	4b7a      	ldr	r3, [pc, #488]	; (8000d68 <maze_game+0x2c8>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	e024      	b.n	8000bd0 <maze_game+0x130>
		}
	}else if (maze_game_counter == 3)
 8000b86:	4b77      	ldr	r3, [pc, #476]	; (8000d64 <maze_game+0x2c4>)
 8000b88:	cb18      	ldmia	r3, {r3, r4}
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	bf08      	it	eq
 8000b8e:	2b03      	cmpeq	r3, #3
 8000b90:	d11e      	bne.n	8000bd0 <maze_game+0x130>
	{
		if (number_flag==0)
 8000b92:	4b75      	ldr	r3, [pc, #468]	; (8000d68 <maze_game+0x2c8>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d11a      	bne.n	8000bd0 <maze_game+0x130>
		{
			display_maze_number(4); //displays maze1
 8000b9a:	2004      	movs	r0, #4
 8000b9c:	f000 fb36 	bl	800120c <display_maze_number>
			HAL_GPIO_WritePin(GPIOB, DEBUG4_Pin, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	4873      	ldr	r0, [pc, #460]	; (8000d74 <maze_game+0x2d4>)
 8000ba6:	f002 f948 	bl	8002e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, DEBUG1_Pin, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2120      	movs	r1, #32
 8000bae:	486f      	ldr	r0, [pc, #444]	; (8000d6c <maze_game+0x2cc>)
 8000bb0:	f002 f943 	bl	8002e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, DEBUG2_Pin, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	486d      	ldr	r0, [pc, #436]	; (8000d70 <maze_game+0x2d0>)
 8000bba:	f002 f93e 	bl	8002e3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, DEBUG3_Pin, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc4:	4869      	ldr	r0, [pc, #420]	; (8000d6c <maze_game+0x2cc>)
 8000bc6:	f002 f938 	bl	8002e3a <HAL_GPIO_WritePin>
			number_flag=1;
 8000bca:	4b67      	ldr	r3, [pc, #412]	; (8000d68 <maze_game+0x2c8>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]

		}
	}


	if(maze_flag==0)//still in the maze menu
 8000bd0:	4b69      	ldr	r3, [pc, #420]	; (8000d78 <maze_game+0x2d8>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d16b      	bne.n	8000cb0 <maze_game+0x210>
	{
		if(up_pressed==1)
 8000bd8:	4b68      	ldr	r3, [pc, #416]	; (8000d7c <maze_game+0x2dc>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d114      	bne.n	8000c0c <maze_game+0x16c>
		{
			up_pressed=0;
 8000be2:	4b66      	ldr	r3, [pc, #408]	; (8000d7c <maze_game+0x2dc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
			number_flag=0;
 8000be8:	4b5f      	ldr	r3, [pc, #380]	; (8000d68 <maze_game+0x2c8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
			if(maze_game_counter<3)
 8000bee:	4b5d      	ldr	r3, [pc, #372]	; (8000d64 <maze_game+0x2c4>)
 8000bf0:	cb18      	ldmia	r3, {r3, r4}
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	f174 0300 	sbcs.w	r3, r4, #0
 8000bf8:	da08      	bge.n	8000c0c <maze_game+0x16c>
			{
				maze_game_counter++;
 8000bfa:	4b5a      	ldr	r3, [pc, #360]	; (8000d64 <maze_game+0x2c4>)
 8000bfc:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000c00:	1c4b      	adds	r3, r1, #1
 8000c02:	f142 0400 	adc.w	r4, r2, #0
 8000c06:	4a57      	ldr	r2, [pc, #348]	; (8000d64 <maze_game+0x2c4>)
 8000c08:	e9c2 3400 	strd	r3, r4, [r2]
			}
		}
		if (down_pressed==1)
 8000c0c:	4b5c      	ldr	r3, [pc, #368]	; (8000d80 <maze_game+0x2e0>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d115      	bne.n	8000c42 <maze_game+0x1a2>
		{
			down_pressed=0;
 8000c16:	4b5a      	ldr	r3, [pc, #360]	; (8000d80 <maze_game+0x2e0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
			number_flag=0;
 8000c1c:	4b52      	ldr	r3, [pc, #328]	; (8000d68 <maze_game+0x2c8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
			if(maze_game_counter>0)
 8000c22:	4b50      	ldr	r3, [pc, #320]	; (8000d64 <maze_game+0x2c4>)
 8000c24:	cb18      	ldmia	r3, {r3, r4}
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	f174 0300 	sbcs.w	r3, r4, #0
 8000c2c:	db09      	blt.n	8000c42 <maze_game+0x1a2>
			{
				maze_game_counter--;
 8000c2e:	4b4d      	ldr	r3, [pc, #308]	; (8000d64 <maze_game+0x2c4>)
 8000c30:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000c34:	f111 33ff 	adds.w	r3, r1, #4294967295
 8000c38:	f142 34ff 	adc.w	r4, r2, #4294967295
 8000c3c:	4a49      	ldr	r2, [pc, #292]	; (8000d64 <maze_game+0x2c4>)
 8000c3e:	e9c2 3400 	strd	r3, r4, [r2]
			}
		}
		if(middle_pressed==1)
 8000c42:	4b50      	ldr	r3, [pc, #320]	; (8000d84 <maze_game+0x2e4>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	f040 82ca 	bne.w	80011e2 <maze_game+0x742>
		{
			mazemenuflag=0;
 8000c4e:	4b4e      	ldr	r3, [pc, #312]	; (8000d88 <maze_game+0x2e8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
			maze_flag = 1;
 8000c54:	4b48      	ldr	r3, [pc, #288]	; (8000d78 <maze_game+0x2d8>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
			switch(maze_game_counter)
 8000c5a:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <maze_game+0x2c4>)
 8000c5c:	cb18      	ldmia	r3, {r3, r4}
 8000c5e:	1c19      	adds	r1, r3, #0
 8000c60:	f144 0200 	adc.w	r2, r4, #0
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	bf08      	it	eq
 8000c68:	2904      	cmpeq	r1, #4
 8000c6a:	d21d      	bcs.n	8000ca8 <maze_game+0x208>
 8000c6c:	2903      	cmp	r1, #3
 8000c6e:	d81b      	bhi.n	8000ca8 <maze_game+0x208>
 8000c70:	a301      	add	r3, pc, #4	; (adr r3, 8000c78 <maze_game+0x1d8>)
 8000c72:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8000c76:	bf00      	nop
 8000c78:	08000c89 	.word	0x08000c89
 8000c7c:	08000c91 	.word	0x08000c91
 8000c80:	08000c99 	.word	0x08000c99
 8000c84:	08000ca1 	.word	0x08000ca1
			{
			case 0:
				construct_maze_game(maze1);
 8000c88:	4840      	ldr	r0, [pc, #256]	; (8000d8c <maze_game+0x2ec>)
 8000c8a:	f7ff fe97 	bl	80009bc <construct_maze_game>
				break;
 8000c8e:	e00b      	b.n	8000ca8 <maze_game+0x208>
			case 1:
				construct_maze_game(maze2);
 8000c90:	483f      	ldr	r0, [pc, #252]	; (8000d90 <maze_game+0x2f0>)
 8000c92:	f7ff fe93 	bl	80009bc <construct_maze_game>
				break;
 8000c96:	e007      	b.n	8000ca8 <maze_game+0x208>
			case 2:
				construct_maze_game(maze3);
 8000c98:	483e      	ldr	r0, [pc, #248]	; (8000d94 <maze_game+0x2f4>)
 8000c9a:	f7ff fe8f 	bl	80009bc <construct_maze_game>
				break;
 8000c9e:	e003      	b.n	8000ca8 <maze_game+0x208>
			case 3:
				construct_maze_game(maze4);
 8000ca0:	483d      	ldr	r0, [pc, #244]	; (8000d98 <maze_game+0x2f8>)
 8000ca2:	f7ff fe8b 	bl	80009bc <construct_maze_game>
				break;
 8000ca6:	bf00      	nop
			}
			middle_pressed = 0;
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <maze_game+0x2e4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart2, (uint8_t*)maze_message, 10, 50);
		}

	}
}
 8000cae:	e298      	b.n	80011e2 <maze_game+0x742>
		switch(maze_game_counter)
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <maze_game+0x2c4>)
 8000cb2:	cb18      	ldmia	r3, {r3, r4}
 8000cb4:	1c19      	adds	r1, r3, #0
 8000cb6:	f144 0200 	adc.w	r2, r4, #0
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	bf08      	it	eq
 8000cbe:	2904      	cmpeq	r1, #4
 8000cc0:	f080 808b 	bcs.w	8000dda <maze_game+0x33a>
 8000cc4:	2903      	cmp	r1, #3
 8000cc6:	f200 8088 	bhi.w	8000dda <maze_game+0x33a>
 8000cca:	a301      	add	r3, pc, #4	; (adr r3, 8000cd0 <maze_game+0x230>)
 8000ccc:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8000cd0:	08000ce1 	.word	0x08000ce1
 8000cd4:	08000d0d 	.word	0x08000d0d
 8000cd8:	08000d39 	.word	0x08000d39
 8000cdc:	08000da1 	.word	0x08000da1
			if(maze1[ball.Ypos][ball.Xpos]==5)
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <maze_game+0x2fc>)
 8000ce2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <maze_game+0x2fc>)
 8000cea:	f993 3000 	ldrsb.w	r3, [r3]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4a26      	ldr	r2, [pc, #152]	; (8000d8c <maze_game+0x2ec>)
 8000cf2:	00c3      	lsls	r3, r0, #3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f993 3000 	ldrsb.w	r3, [r3]
 8000cfc:	2b05      	cmp	r3, #5
 8000cfe:	d165      	bne.n	8000dcc <maze_game+0x32c>
				middle_pressed=1;
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <maze_game+0x2e4>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
				maze_gameStop();
 8000d06:	f000 fb33 	bl	8001370 <maze_gameStop>
			break;
 8000d0a:	e05f      	b.n	8000dcc <maze_game+0x32c>
			if(maze2[ball.Ypos][ball.Xpos]==5)
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <maze_game+0x2fc>)
 8000d0e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d12:	4618      	mov	r0, r3
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <maze_game+0x2fc>)
 8000d16:	f993 3000 	ldrsb.w	r3, [r3]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <maze_game+0x2f0>)
 8000d1e:	00c3      	lsls	r3, r0, #3
 8000d20:	4413      	add	r3, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f993 3000 	ldrsb.w	r3, [r3]
 8000d28:	2b05      	cmp	r3, #5
 8000d2a:	d151      	bne.n	8000dd0 <maze_game+0x330>
				middle_pressed=1;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <maze_game+0x2e4>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
				maze_gameStop();
 8000d32:	f000 fb1d 	bl	8001370 <maze_gameStop>
			break;
 8000d36:	e04b      	b.n	8000dd0 <maze_game+0x330>
			if(maze3[ball.Ypos][ball.Xpos]==5)
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <maze_game+0x2fc>)
 8000d3a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <maze_game+0x2fc>)
 8000d42:	f993 3000 	ldrsb.w	r3, [r3]
 8000d46:	4619      	mov	r1, r3
 8000d48:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <maze_game+0x2f4>)
 8000d4a:	00c3      	lsls	r3, r0, #3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f993 3000 	ldrsb.w	r3, [r3]
 8000d54:	2b05      	cmp	r3, #5
 8000d56:	d13d      	bne.n	8000dd4 <maze_game+0x334>
				middle_pressed=1;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <maze_game+0x2e4>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
				maze_gameStop();
 8000d5e:	f000 fb07 	bl	8001370 <maze_gameStop>
			break;
 8000d62:	e037      	b.n	8000dd4 <maze_game+0x334>
 8000d64:	20000260 	.word	0x20000260
 8000d68:	20000268 	.word	0x20000268
 8000d6c:	40010800 	.word	0x40010800
 8000d70:	40011000 	.word	0x40011000
 8000d74:	40010c00 	.word	0x40010c00
 8000d78:	20000269 	.word	0x20000269
 8000d7c:	20000363 	.word	0x20000363
 8000d80:	200003aa 	.word	0x200003aa
 8000d84:	200003ac 	.word	0x200003ac
 8000d88:	2000026a 	.word	0x2000026a
 8000d8c:	2000000c 	.word	0x2000000c
 8000d90:	2000004c 	.word	0x2000004c
 8000d94:	2000008c 	.word	0x2000008c
 8000d98:	200000cc 	.word	0x200000cc
 8000d9c:	200003b4 	.word	0x200003b4
			if(maze4[ball.Ypos][ball.Xpos]==5)
 8000da0:	4ba0      	ldr	r3, [pc, #640]	; (8001024 <maze_game+0x584>)
 8000da2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000da6:	4618      	mov	r0, r3
 8000da8:	4b9e      	ldr	r3, [pc, #632]	; (8001024 <maze_game+0x584>)
 8000daa:	f993 3000 	ldrsb.w	r3, [r3]
 8000dae:	4619      	mov	r1, r3
 8000db0:	4a9d      	ldr	r2, [pc, #628]	; (8001028 <maze_game+0x588>)
 8000db2:	00c3      	lsls	r3, r0, #3
 8000db4:	4413      	add	r3, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f993 3000 	ldrsb.w	r3, [r3]
 8000dbc:	2b05      	cmp	r3, #5
 8000dbe:	d10b      	bne.n	8000dd8 <maze_game+0x338>
				middle_pressed=1;
 8000dc0:	4b9a      	ldr	r3, [pc, #616]	; (800102c <maze_game+0x58c>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
				maze_gameStop();
 8000dc6:	f000 fad3 	bl	8001370 <maze_gameStop>
			break;
 8000dca:	e005      	b.n	8000dd8 <maze_game+0x338>
			break;
 8000dcc:	bf00      	nop
 8000dce:	e004      	b.n	8000dda <maze_game+0x33a>
			break;
 8000dd0:	bf00      	nop
 8000dd2:	e002      	b.n	8000dda <maze_game+0x33a>
			break;
 8000dd4:	bf00      	nop
 8000dd6:	e000      	b.n	8000dda <maze_game+0x33a>
			break;
 8000dd8:	bf00      	nop
		if(end_toggle==1)
 8000dda:	4b95      	ldr	r3, [pc, #596]	; (8001030 <maze_game+0x590>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d14f      	bne.n	8000e84 <maze_game+0x3e4>
			goal_visible*=-1;
 8000de4:	4b93      	ldr	r3, [pc, #588]	; (8001034 <maze_game+0x594>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b25b      	sxtb	r3, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	425b      	negs	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	b25a      	sxtb	r2, r3
 8000df2:	4b90      	ldr	r3, [pc, #576]	; (8001034 <maze_game+0x594>)
 8000df4:	701a      	strb	r2, [r3, #0]
			toggle*=-1;
 8000df6:	4b90      	ldr	r3, [pc, #576]	; (8001038 <maze_game+0x598>)
 8000df8:	f993 3000 	ldrsb.w	r3, [r3]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	425b      	negs	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	b25a      	sxtb	r2, r3
 8000e04:	4b8c      	ldr	r3, [pc, #560]	; (8001038 <maze_game+0x598>)
 8000e06:	701a      	strb	r2, [r3, #0]
			togglebit=5;
 8000e08:	4b8c      	ldr	r3, [pc, #560]	; (800103c <maze_game+0x59c>)
 8000e0a:	2205      	movs	r2, #5
 8000e0c:	701a      	strb	r2, [r3, #0]
			end_toggle=0;
 8000e0e:	4b88      	ldr	r3, [pc, #544]	; (8001030 <maze_game+0x590>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
			if(toggle==1)
 8000e14:	4b88      	ldr	r3, [pc, #544]	; (8001038 <maze_game+0x598>)
 8000e16:	f993 3000 	ldrsb.w	r3, [r3]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d102      	bne.n	8000e24 <maze_game+0x384>
				togglebit = 0;
 8000e1e:	4b87      	ldr	r3, [pc, #540]	; (800103c <maze_game+0x59c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
			switch(maze_game_counter)
 8000e24:	4b86      	ldr	r3, [pc, #536]	; (8001040 <maze_game+0x5a0>)
 8000e26:	cb18      	ldmia	r3, {r3, r4}
 8000e28:	1c19      	adds	r1, r3, #0
 8000e2a:	f144 0200 	adc.w	r2, r4, #0
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	bf08      	it	eq
 8000e32:	2904      	cmpeq	r1, #4
 8000e34:	d226      	bcs.n	8000e84 <maze_game+0x3e4>
 8000e36:	2903      	cmp	r1, #3
 8000e38:	d824      	bhi.n	8000e84 <maze_game+0x3e4>
 8000e3a:	a301      	add	r3, pc, #4	; (adr r3, 8000e40 <maze_game+0x3a0>)
 8000e3c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8000e40:	08000e51 	.word	0x08000e51
 8000e44:	08000e5f 	.word	0x08000e5f
 8000e48:	08000e6b 	.word	0x08000e6b
 8000e4c:	08000e79 	.word	0x08000e79
				display[7][7]=togglebit;
 8000e50:	4b7a      	ldr	r3, [pc, #488]	; (800103c <maze_game+0x59c>)
 8000e52:	f993 2000 	ldrsb.w	r2, [r3]
 8000e56:	4b7b      	ldr	r3, [pc, #492]	; (8001044 <maze_game+0x5a4>)
 8000e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				break;
 8000e5c:	e012      	b.n	8000e84 <maze_game+0x3e4>
				display[3][3]=togglebit;
 8000e5e:	4b77      	ldr	r3, [pc, #476]	; (800103c <maze_game+0x59c>)
 8000e60:	f993 2000 	ldrsb.w	r2, [r3]
 8000e64:	4b77      	ldr	r3, [pc, #476]	; (8001044 <maze_game+0x5a4>)
 8000e66:	76da      	strb	r2, [r3, #27]
				break;
 8000e68:	e00c      	b.n	8000e84 <maze_game+0x3e4>
				display[7][7]=togglebit;
 8000e6a:	4b74      	ldr	r3, [pc, #464]	; (800103c <maze_game+0x59c>)
 8000e6c:	f993 2000 	ldrsb.w	r2, [r3]
 8000e70:	4b74      	ldr	r3, [pc, #464]	; (8001044 <maze_game+0x5a4>)
 8000e72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				break;
 8000e76:	e005      	b.n	8000e84 <maze_game+0x3e4>
				display[0][2]=togglebit;
 8000e78:	4b70      	ldr	r3, [pc, #448]	; (800103c <maze_game+0x59c>)
 8000e7a:	f993 2000 	ldrsb.w	r2, [r3]
 8000e7e:	4b71      	ldr	r3, [pc, #452]	; (8001044 <maze_game+0x5a4>)
 8000e80:	709a      	strb	r2, [r3, #2]
				break;
 8000e82:	bf00      	nop
		ball.Yprev=ball.Ypos;
 8000e84:	4b67      	ldr	r3, [pc, #412]	; (8001024 <maze_game+0x584>)
 8000e86:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000e8a:	4b66      	ldr	r3, [pc, #408]	; (8001024 <maze_game+0x584>)
 8000e8c:	70da      	strb	r2, [r3, #3]
		ball.Xprev=ball.Xpos;
 8000e8e:	4b65      	ldr	r3, [pc, #404]	; (8001024 <maze_game+0x584>)
 8000e90:	f993 2000 	ldrsb.w	r2, [r3]
 8000e94:	4b63      	ldr	r3, [pc, #396]	; (8001024 <maze_game+0x584>)
 8000e96:	709a      	strb	r2, [r3, #2]
		if(ax>8192){ //sin30*16384, 16384 max positive raw value
 8000e98:	4b6b      	ldr	r3, [pc, #428]	; (8001048 <maze_game+0x5a8>)
 8000e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ea2:	dd06      	ble.n	8000eb2 <maze_game+0x412>
			left_pressed=1;
 8000ea4:	4b69      	ldr	r3, [pc, #420]	; (800104c <maze_game+0x5ac>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
			IMU_Char=76;
 8000eaa:	4b69      	ldr	r3, [pc, #420]	; (8001050 <maze_game+0x5b0>)
 8000eac:	224c      	movs	r2, #76	; 0x4c
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e029      	b.n	8000f06 <maze_game+0x466>
		else if(ax<-8192){
 8000eb2:	4b65      	ldr	r3, [pc, #404]	; (8001048 <maze_game+0x5a8>)
 8000eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb8:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 8000ebc:	da06      	bge.n	8000ecc <maze_game+0x42c>
			right_pressed=1;
 8000ebe:	4b65      	ldr	r3, [pc, #404]	; (8001054 <maze_game+0x5b4>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
			IMU_Char=82;
 8000ec4:	4b62      	ldr	r3, [pc, #392]	; (8001050 <maze_game+0x5b0>)
 8000ec6:	2252      	movs	r2, #82	; 0x52
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	e01c      	b.n	8000f06 <maze_game+0x466>
		else if(ay>8192){
 8000ecc:	4b62      	ldr	r3, [pc, #392]	; (8001058 <maze_game+0x5b8>)
 8000ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed6:	dd06      	ble.n	8000ee6 <maze_game+0x446>
			down_pressed=1;
 8000ed8:	4b60      	ldr	r3, [pc, #384]	; (800105c <maze_game+0x5bc>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
			IMU_Char=68;
 8000ede:	4b5c      	ldr	r3, [pc, #368]	; (8001050 <maze_game+0x5b0>)
 8000ee0:	2244      	movs	r2, #68	; 0x44
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e00f      	b.n	8000f06 <maze_game+0x466>
		else if(ay<-8192){
 8000ee6:	4b5c      	ldr	r3, [pc, #368]	; (8001058 <maze_game+0x5b8>)
 8000ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eec:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 8000ef0:	da06      	bge.n	8000f00 <maze_game+0x460>
			up_pressed=1;
 8000ef2:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <maze_game+0x5c0>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
			IMU_Char=85;
 8000ef8:	4b55      	ldr	r3, [pc, #340]	; (8001050 <maze_game+0x5b0>)
 8000efa:	2255      	movs	r2, #85	; 0x55
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	e002      	b.n	8000f06 <maze_game+0x466>
			IMU_Char=78;
 8000f00:	4b53      	ldr	r3, [pc, #332]	; (8001050 <maze_game+0x5b0>)
 8000f02:	224e      	movs	r2, #78	; 0x4e
 8000f04:	701a      	strb	r2, [r3, #0]
		if(maze_ball_allowed_to_move==1){
 8000f06:	4b57      	ldr	r3, [pc, #348]	; (8001064 <maze_game+0x5c4>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	f040 80ea 	bne.w	80010e6 <maze_game+0x646>
			maze_ball_allowed_to_move=0;
 8000f12:	4b54      	ldr	r3, [pc, #336]	; (8001064 <maze_game+0x5c4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
			if(right_pressed==1)
 8000f18:	4b4e      	ldr	r3, [pc, #312]	; (8001054 <maze_game+0x5b4>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d12b      	bne.n	8000f7a <maze_game+0x4da>
				right_pressed=0;
 8000f22:	4b4c      	ldr	r3, [pc, #304]	; (8001054 <maze_game+0x5b4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
				if(display[ball.Ypos][ball.Xpos+1]!=1){
 8000f28:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <maze_game+0x584>)
 8000f2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b3c      	ldr	r3, [pc, #240]	; (8001024 <maze_game+0x584>)
 8000f32:	f993 3000 	ldrsb.w	r3, [r3]
 8000f36:	3301      	adds	r3, #1
 8000f38:	4942      	ldr	r1, [pc, #264]	; (8001044 <maze_game+0x5a4>)
 8000f3a:	00d2      	lsls	r2, r2, #3
 8000f3c:	440a      	add	r2, r1
 8000f3e:	4413      	add	r3, r2
 8000f40:	f993 3000 	ldrsb.w	r3, [r3]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d018      	beq.n	8000f7a <maze_game+0x4da>
					if(ball.Xpos>=7){
 8000f48:	4b36      	ldr	r3, [pc, #216]	; (8001024 <maze_game+0x584>)
 8000f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	dd05      	ble.n	8000f5e <maze_game+0x4be>
						ball.Xpos=ball.Xpos;
 8000f52:	4b34      	ldr	r3, [pc, #208]	; (8001024 <maze_game+0x584>)
 8000f54:	f993 2000 	ldrsb.w	r2, [r3]
 8000f58:	4b32      	ldr	r3, [pc, #200]	; (8001024 <maze_game+0x584>)
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e00d      	b.n	8000f7a <maze_game+0x4da>
					}else if (ball.Xpos<7)
 8000f5e:	4b31      	ldr	r3, [pc, #196]	; (8001024 <maze_game+0x584>)
 8000f60:	f993 3000 	ldrsb.w	r3, [r3]
 8000f64:	2b06      	cmp	r3, #6
 8000f66:	dc08      	bgt.n	8000f7a <maze_game+0x4da>
						ball.Xpos=ball.Xpos+1;
 8000f68:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <maze_game+0x584>)
 8000f6a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	3301      	adds	r3, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	b25a      	sxtb	r2, r3
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <maze_game+0x584>)
 8000f78:	701a      	strb	r2, [r3, #0]
			if(left_pressed==1)
 8000f7a:	4b34      	ldr	r3, [pc, #208]	; (800104c <maze_game+0x5ac>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d12b      	bne.n	8000fdc <maze_game+0x53c>
				left_pressed=0;
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <maze_game+0x5ac>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
				if(display[ball.Ypos][ball.Xpos-1]!=1){
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <maze_game+0x584>)
 8000f8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b24      	ldr	r3, [pc, #144]	; (8001024 <maze_game+0x584>)
 8000f94:	f993 3000 	ldrsb.w	r3, [r3]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	492a      	ldr	r1, [pc, #168]	; (8001044 <maze_game+0x5a4>)
 8000f9c:	00d2      	lsls	r2, r2, #3
 8000f9e:	440a      	add	r2, r1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f993 3000 	ldrsb.w	r3, [r3]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d018      	beq.n	8000fdc <maze_game+0x53c>
					if(ball.Xpos<=0){
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <maze_game+0x584>)
 8000fac:	f993 3000 	ldrsb.w	r3, [r3]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dc05      	bgt.n	8000fc0 <maze_game+0x520>
						ball.Xpos=ball.Xpos;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <maze_game+0x584>)
 8000fb6:	f993 2000 	ldrsb.w	r2, [r3]
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <maze_game+0x584>)
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e00d      	b.n	8000fdc <maze_game+0x53c>
					}else if (ball.Xpos>0)
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <maze_game+0x584>)
 8000fc2:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	dd08      	ble.n	8000fdc <maze_game+0x53c>
						ball.Xpos=ball.Xpos-1;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <maze_game+0x584>)
 8000fcc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	b25a      	sxtb	r2, r3
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <maze_game+0x584>)
 8000fda:	701a      	strb	r2, [r3, #0]
			if(up_pressed==1)
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <maze_game+0x5c0>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d14e      	bne.n	8001084 <maze_game+0x5e4>
				up_pressed=0;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <maze_game+0x5c0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
				if(display[ball.Ypos-1][ball.Xpos]!=1){
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <maze_game+0x584>)
 8000fee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <maze_game+0x584>)
 8000ff6:	f992 2000 	ldrsb.w	r2, [r2]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4a11      	ldr	r2, [pc, #68]	; (8001044 <maze_game+0x5a4>)
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4413      	add	r3, r2
 8001002:	440b      	add	r3, r1
 8001004:	f993 3000 	ldrsb.w	r3, [r3]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d03b      	beq.n	8001084 <maze_game+0x5e4>
					if(ball.Ypos<=0){
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <maze_game+0x584>)
 800100e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001012:	2b00      	cmp	r3, #0
 8001014:	dc28      	bgt.n	8001068 <maze_game+0x5c8>
						ball.Ypos=ball.Ypos;
 8001016:	4b03      	ldr	r3, [pc, #12]	; (8001024 <maze_game+0x584>)
 8001018:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800101c:	4b01      	ldr	r3, [pc, #4]	; (8001024 <maze_game+0x584>)
 800101e:	705a      	strb	r2, [r3, #1]
 8001020:	e030      	b.n	8001084 <maze_game+0x5e4>
 8001022:	bf00      	nop
 8001024:	200003b4 	.word	0x200003b4
 8001028:	200000cc 	.word	0x200000cc
 800102c:	200003ac 	.word	0x200003ac
 8001030:	2000020d 	.word	0x2000020d
 8001034:	20000213 	.word	0x20000213
 8001038:	2000021e 	.word	0x2000021e
 800103c:	2000026b 	.word	0x2000026b
 8001040:	20000260 	.word	0x20000260
 8001044:	20000288 	.word	0x20000288
 8001048:	2000039e 	.word	0x2000039e
 800104c:	20000308 	.word	0x20000308
 8001050:	2000020c 	.word	0x2000020c
 8001054:	200003b1 	.word	0x200003b1
 8001058:	200003ae 	.word	0x200003ae
 800105c:	200003aa 	.word	0x200003aa
 8001060:	20000363 	.word	0x20000363
 8001064:	20000211 	.word	0x20000211
					}else if (ball.Ypos>0)
 8001068:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <maze_game+0x748>)
 800106a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800106e:	2b00      	cmp	r3, #0
 8001070:	dd08      	ble.n	8001084 <maze_game+0x5e4>
						ball.Ypos=ball.Ypos-1;
 8001072:	4b5d      	ldr	r3, [pc, #372]	; (80011e8 <maze_game+0x748>)
 8001074:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	3b01      	subs	r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	b25a      	sxtb	r2, r3
 8001080:	4b59      	ldr	r3, [pc, #356]	; (80011e8 <maze_game+0x748>)
 8001082:	705a      	strb	r2, [r3, #1]
			if(down_pressed==1)
 8001084:	4b59      	ldr	r3, [pc, #356]	; (80011ec <maze_game+0x74c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b25b      	sxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d12b      	bne.n	80010e6 <maze_game+0x646>
				down_pressed=0;
 800108e:	4b57      	ldr	r3, [pc, #348]	; (80011ec <maze_game+0x74c>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
				if(display[ball.Ypos+1][ball.Xpos]!=1){
 8001094:	4b54      	ldr	r3, [pc, #336]	; (80011e8 <maze_game+0x748>)
 8001096:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800109a:	3301      	adds	r3, #1
 800109c:	4a52      	ldr	r2, [pc, #328]	; (80011e8 <maze_game+0x748>)
 800109e:	f992 2000 	ldrsb.w	r2, [r2]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <maze_game+0x750>)
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f993 3000 	ldrsb.w	r3, [r3]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d018      	beq.n	80010e6 <maze_game+0x646>
					if(ball.Ypos>=7){
 80010b4:	4b4c      	ldr	r3, [pc, #304]	; (80011e8 <maze_game+0x748>)
 80010b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	dd05      	ble.n	80010ca <maze_game+0x62a>
						ball.Ypos=ball.Ypos;
 80010be:	4b4a      	ldr	r3, [pc, #296]	; (80011e8 <maze_game+0x748>)
 80010c0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80010c4:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <maze_game+0x748>)
 80010c6:	705a      	strb	r2, [r3, #1]
 80010c8:	e00d      	b.n	80010e6 <maze_game+0x646>
					}else if (ball.Ypos<7)
 80010ca:	4b47      	ldr	r3, [pc, #284]	; (80011e8 <maze_game+0x748>)
 80010cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010d0:	2b06      	cmp	r3, #6
 80010d2:	dc08      	bgt.n	80010e6 <maze_game+0x646>
						ball.Ypos=ball.Ypos+1;
 80010d4:	4b44      	ldr	r3, [pc, #272]	; (80011e8 <maze_game+0x748>)
 80010d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	3301      	adds	r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <maze_game+0x748>)
 80010e4:	705a      	strb	r2, [r3, #1]
		if((ball.Xpos!=ball.Xprev)||(ball.Ypos!=ball.Yprev))
 80010e6:	4b40      	ldr	r3, [pc, #256]	; (80011e8 <maze_game+0x748>)
 80010e8:	f993 2000 	ldrsb.w	r2, [r3]
 80010ec:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <maze_game+0x748>)
 80010ee:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d107      	bne.n	8001106 <maze_game+0x666>
 80010f6:	4b3c      	ldr	r3, [pc, #240]	; (80011e8 <maze_game+0x748>)
 80010f8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80010fc:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <maze_game+0x748>)
 80010fe:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001102:	429a      	cmp	r2, r3
 8001104:	d00d      	beq.n	8001122 <maze_game+0x682>
			display[ball.Yprev][ball.Xprev] = 0;
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <maze_game+0x748>)
 8001108:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800110c:	4618      	mov	r0, r3
 800110e:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <maze_game+0x748>)
 8001110:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001114:	4619      	mov	r1, r3
 8001116:	4a36      	ldr	r2, [pc, #216]	; (80011f0 <maze_game+0x750>)
 8001118:	00c3      	lsls	r3, r0, #3
 800111a:	4413      	add	r3, r2
 800111c:	440b      	add	r3, r1
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
		if(uart_transmit_ball_pos==1)
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <maze_game+0x754>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b25b      	sxtb	r3, r3
 8001128:	2b01      	cmp	r3, #1
 800112a:	d15a      	bne.n	80011e2 <maze_game+0x742>
			uart_transmit_ball_pos = 0;
 800112c:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <maze_game+0x754>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
			maze_message[2] = (ball.Xpos + 48);
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <maze_game+0x748>)
 8001134:	f993 3000 	ldrsb.w	r3, [r3]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	3330      	adds	r3, #48	; 0x30
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <maze_game+0x758>)
 8001140:	709a      	strb	r2, [r3, #2]
			maze_message[3] = (ball.Ypos + 48);
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <maze_game+0x748>)
 8001144:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	3330      	adds	r3, #48	; 0x30
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <maze_game+0x758>)
 8001150:	70da      	strb	r2, [r3, #3]
			maze_message[4] = (player_toggle + 48);
 8001152:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <maze_game+0x75c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b25b      	sxtb	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	3330      	adds	r3, #48	; 0x30
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <maze_game+0x758>)
 8001160:	711a      	strb	r2, [r3, #4]
			maze_message[5] = (end_visible + 48);
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <maze_game+0x760>)
 8001164:	f993 3000 	ldrsb.w	r3, [r3]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	3330      	adds	r3, #48	; 0x30
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <maze_game+0x758>)
 8001170:	715a      	strb	r2, [r3, #5]
			maze_message[6] = (IMU_Char);
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <maze_game+0x764>)
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <maze_game+0x758>)
 8001178:	719a      	strb	r2, [r3, #6]
			if(player_toggle==1){
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <maze_game+0x75c>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b25b      	sxtb	r3, r3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d114      	bne.n	80011ae <maze_game+0x70e>
				display[ball.Ypos][ball.Xpos]=1;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <maze_game+0x748>)
 8001186:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800118a:	4618      	mov	r0, r3
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <maze_game+0x748>)
 800118e:	f993 3000 	ldrsb.w	r3, [r3]
 8001192:	4619      	mov	r1, r3
 8001194:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <maze_game+0x750>)
 8001196:	00c3      	lsls	r3, r0, #3
 8001198:	4413      	add	r3, r2
 800119a:	440b      	add	r3, r1
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
				player_toggle=0;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <maze_game+0x75c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
				end_visible=0;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <maze_game+0x760>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e013      	b.n	80011d6 <maze_game+0x736>
				display[ball.Ypos][ball.Xpos]=0;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <maze_game+0x748>)
 80011b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011b4:	4618      	mov	r0, r3
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <maze_game+0x748>)
 80011b8:	f993 3000 	ldrsb.w	r3, [r3]
 80011bc:	4619      	mov	r1, r3
 80011be:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <maze_game+0x750>)
 80011c0:	00c3      	lsls	r3, r0, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
				player_toggle=1;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <maze_game+0x75c>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
				end_visible=1;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <maze_game+0x760>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)maze_message, 10, 50);
 80011d6:	2332      	movs	r3, #50	; 0x32
 80011d8:	220a      	movs	r2, #10
 80011da:	4907      	ldr	r1, [pc, #28]	; (80011f8 <maze_game+0x758>)
 80011dc:	480a      	ldr	r0, [pc, #40]	; (8001208 <maze_game+0x768>)
 80011de:	f002 ffb8 	bl	8004152 <HAL_UART_Transmit>
}
 80011e2:	bf00      	nop
 80011e4:	bd98      	pop	{r3, r4, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200003b4 	.word	0x200003b4
 80011ec:	200003aa 	.word	0x200003aa
 80011f0:	20000288 	.word	0x20000288
 80011f4:	2000020f 	.word	0x2000020f
 80011f8:	20000214 	.word	0x20000214
 80011fc:	2000020e 	.word	0x2000020e
 8001200:	2000021f 	.word	0x2000021f
 8001204:	2000020c 	.word	0x2000020c
 8001208:	200002c8 	.word	0x200002c8

0800120c <display_maze_number>:


void display_maze_number(int8_t n)
{
 800120c:	b480      	push	{r7}
 800120e:	b08b      	sub	sp, #44	; 0x2c
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]

	switch(n)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	3b01      	subs	r3, #1
 800121c:	2b03      	cmp	r3, #3
 800121e:	f200 8097 	bhi.w	8001350 <display_maze_number+0x144>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <display_maze_number+0x1c>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	08001239 	.word	0x08001239
 800122c:	0800127f 	.word	0x0800127f
 8001230:	080012c5 	.word	0x080012c5
 8001234:	0800130b 	.word	0x0800130b
	{
	case 1:
		for (int row = 0; row < 8; row++) {
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
 800123c:	e01b      	b.n	8001276 <display_maze_number+0x6a>
			for (int col = 0; col < 8; col++) {
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
 8001242:	e012      	b.n	800126a <display_maze_number+0x5e>
				display[row][col] = num1[row][col];
 8001244:	4a45      	ldr	r2, [pc, #276]	; (800135c <display_maze_number+0x150>)
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	441a      	add	r2, r3
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	4413      	add	r3, r2
 8001250:	f993 1000 	ldrsb.w	r1, [r3]
 8001254:	4a42      	ldr	r2, [pc, #264]	; (8001360 <display_maze_number+0x154>)
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	441a      	add	r2, r3
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	4413      	add	r3, r2
 8001260:	460a      	mov	r2, r1
 8001262:	701a      	strb	r2, [r3, #0]
			for (int col = 0; col < 8; col++) {
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	3301      	adds	r3, #1
 8001268:	623b      	str	r3, [r7, #32]
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	2b07      	cmp	r3, #7
 800126e:	dde9      	ble.n	8001244 <display_maze_number+0x38>
		for (int row = 0; row < 8; row++) {
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	3301      	adds	r3, #1
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	2b07      	cmp	r3, #7
 800127a:	dde0      	ble.n	800123e <display_maze_number+0x32>
			}
		}
		break;
 800127c:	e068      	b.n	8001350 <display_maze_number+0x144>
	case 2:
		for (int row = 0; row < 8; row++) {
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	e01b      	b.n	80012bc <display_maze_number+0xb0>
			for (int col = 0; col < 8; col++) {
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	e012      	b.n	80012b0 <display_maze_number+0xa4>
				display[row][col] = num2[row][col];
 800128a:	4a36      	ldr	r2, [pc, #216]	; (8001364 <display_maze_number+0x158>)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	441a      	add	r2, r3
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4413      	add	r3, r2
 8001296:	f993 1000 	ldrsb.w	r1, [r3]
 800129a:	4a31      	ldr	r2, [pc, #196]	; (8001360 <display_maze_number+0x154>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	441a      	add	r2, r3
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4413      	add	r3, r2
 80012a6:	460a      	mov	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
			for (int col = 0; col < 8; col++) {
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b07      	cmp	r3, #7
 80012b4:	dde9      	ble.n	800128a <display_maze_number+0x7e>
		for (int row = 0; row < 8; row++) {
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	2b07      	cmp	r3, #7
 80012c0:	dde0      	ble.n	8001284 <display_maze_number+0x78>
			}
		}
		break;
 80012c2:	e045      	b.n	8001350 <display_maze_number+0x144>
	case 3:
		for (int row = 0; row < 8; row++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	e01b      	b.n	8001302 <display_maze_number+0xf6>
			for (int col = 0; col < 8; col++) {
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	e012      	b.n	80012f6 <display_maze_number+0xea>
				display[row][col] = num3[row][col];
 80012d0:	4a25      	ldr	r2, [pc, #148]	; (8001368 <display_maze_number+0x15c>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	441a      	add	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4413      	add	r3, r2
 80012dc:	f993 1000 	ldrsb.w	r1, [r3]
 80012e0:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <display_maze_number+0x154>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	441a      	add	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4413      	add	r3, r2
 80012ec:	460a      	mov	r2, r1
 80012ee:	701a      	strb	r2, [r3, #0]
			for (int col = 0; col < 8; col++) {
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	3301      	adds	r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	dde9      	ble.n	80012d0 <display_maze_number+0xc4>
		for (int row = 0; row < 8; row++) {
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b07      	cmp	r3, #7
 8001306:	dde0      	ble.n	80012ca <display_maze_number+0xbe>
			}
		}
		break;
 8001308:	e022      	b.n	8001350 <display_maze_number+0x144>
	case 4:
		for (int row = 0; row < 8; row++) {
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	e01b      	b.n	8001348 <display_maze_number+0x13c>
			for (int col = 0; col < 8; col++) {
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	e012      	b.n	800133c <display_maze_number+0x130>
				display[row][col] = num4[row][col];
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <display_maze_number+0x160>)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	441a      	add	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	4413      	add	r3, r2
 8001322:	f993 1000 	ldrsb.w	r1, [r3]
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <display_maze_number+0x154>)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	441a      	add	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4413      	add	r3, r2
 8001332:	460a      	mov	r2, r1
 8001334:	701a      	strb	r2, [r3, #0]
			for (int col = 0; col < 8; col++) {
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3301      	adds	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b07      	cmp	r3, #7
 8001340:	dde9      	ble.n	8001316 <display_maze_number+0x10a>
		for (int row = 0; row < 8; row++) {
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3301      	adds	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b07      	cmp	r3, #7
 800134c:	dde0      	ble.n	8001310 <display_maze_number+0x104>
			}
		}
		break;
 800134e:	bf00      	nop
	}

}
 8001350:	bf00      	nop
 8001352:	372c      	adds	r7, #44	; 0x2c
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000010c 	.word	0x2000010c
 8001360:	20000288 	.word	0x20000288
 8001364:	2000014c 	.word	0x2000014c
 8001368:	2000018c 	.word	0x2000018c
 800136c:	200001cc 	.word	0x200001cc

08001370 <maze_gameStop>:

void maze_gameStop()
{
 8001370:	b598      	push	{r3, r4, r7, lr}
 8001372:	af00      	add	r7, sp, #0
	//middle_pressed=0;
	maze_game_counter=0;
 8001374:	4a16      	ldr	r2, [pc, #88]	; (80013d0 <maze_gameStop+0x60>)
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	f04f 0400 	mov.w	r4, #0
 800137e:	e9c2 3400 	strd	r3, r4, [r2]
	number_flag=0;
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <maze_gameStop+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
	maze_flag=0;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <maze_gameStop+0x68>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
	mazemenuflag=0;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <maze_gameStop+0x6c>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	ax=0;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <maze_gameStop+0x70>)
 8001396:	2200      	movs	r2, #0
 8001398:	801a      	strh	r2, [r3, #0]
	ay=0;
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <maze_gameStop+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, DEBUG1_Pin, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2120      	movs	r1, #32
 80013a4:	4810      	ldr	r0, [pc, #64]	; (80013e8 <maze_gameStop+0x78>)
 80013a6:	f001 fd48 	bl	8002e3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, DEBUG2_Pin, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	480f      	ldr	r0, [pc, #60]	; (80013ec <maze_gameStop+0x7c>)
 80013b0:	f001 fd43 	bl	8002e3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DEBUG3_Pin, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ba:	480b      	ldr	r0, [pc, #44]	; (80013e8 <maze_gameStop+0x78>)
 80013bc:	f001 fd3d 	bl	8002e3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DEBUG4_Pin, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2120      	movs	r1, #32
 80013c4:	480a      	ldr	r0, [pc, #40]	; (80013f0 <maze_gameStop+0x80>)
 80013c6:	f001 fd38 	bl	8002e3a <HAL_GPIO_WritePin>

	//wait_screen();
}
 80013ca:	bf00      	nop
 80013cc:	bd98      	pop	{r3, r4, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000260 	.word	0x20000260
 80013d4:	20000268 	.word	0x20000268
 80013d8:	20000269 	.word	0x20000269
 80013dc:	2000026a 	.word	0x2000026a
 80013e0:	2000039e 	.word	0x2000039e
 80013e4:	200003ae 	.word	0x200003ae
 80013e8:	40010800 	.word	0x40010800
 80013ec:	40011000 	.word	0x40011000
 80013f0:	40010c00 	.word	0x40010c00

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_MspInit+0x5c>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_MspInit+0x5c>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6193      	str	r3, [r2, #24]
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_MspInit+0x5c>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_MspInit+0x5c>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_MspInit+0x5c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_MspInit+0x5c>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_MspInit+0x60>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_MspInit+0x60>)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	40021000 	.word	0x40021000
 8001454:	40010000 	.word	0x40010000

08001458 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <HAL_ADC_MspInit+0x6c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d121      	bne.n	80014bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <HAL_ADC_MspInit+0x70>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <HAL_ADC_MspInit+0x70>)
 800147e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_ADC_MspInit+0x70>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_ADC_MspInit+0x70>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <HAL_ADC_MspInit+0x70>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_ADC_MspInit+0x70>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a8:	2301      	movs	r3, #1
 80014aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ac:	2303      	movs	r3, #3
 80014ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4619      	mov	r1, r3
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_ADC_MspInit+0x74>)
 80014b8:	f001 fb4e 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014bc:	bf00      	nop
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40012400 	.word	0x40012400
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010800 	.word	0x40010800

080014d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <HAL_I2C_MspInit+0x70>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d123      	bne.n	8001538 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_I2C_MspInit+0x74>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_I2C_MspInit+0x74>)
 80014f6:	f043 0308 	orr.w	r3, r3, #8
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_I2C_MspInit+0x74>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001508:	23c0      	movs	r3, #192	; 0xc0
 800150a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150c:	2312      	movs	r3, #18
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	480b      	ldr	r0, [pc, #44]	; (8001548 <HAL_I2C_MspInit+0x78>)
 800151c:	f001 fb1c 	bl	8002b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_I2C_MspInit+0x74>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_I2C_MspInit+0x74>)
 8001526:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152a:	61d3      	str	r3, [r2, #28]
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_I2C_MspInit+0x74>)
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40005400 	.word	0x40005400
 8001544:	40021000 	.word	0x40021000
 8001548:	40010c00 	.word	0x40010c00

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <HAL_UART_MspInit+0x70>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d123      	bne.n	80015b4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <HAL_UART_MspInit+0x74>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <HAL_UART_MspInit+0x74>)
 8001572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001576:	61d3      	str	r3, [r2, #28]
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_UART_MspInit+0x74>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_UART_MspInit+0x74>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <HAL_UART_MspInit+0x74>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_UART_MspInit+0x74>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800159c:	230c      	movs	r3, #12
 800159e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <HAL_UART_MspInit+0x78>)
 80015b0:	f001 fad2 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40004400 	.word	0x40004400
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010800 	.word	0x40010800

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <HardFault_Handler+0x4>

080015da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <MemManage_Handler+0x4>

080015e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <BusFault_Handler+0x4>

080015e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <UsageFault_Handler+0x4>

080015ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b598      	push	{r3, r4, r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	display_matrix();
 8001614:	f7ff f886 	bl	8000724 <display_matrix>
	sysTickCounter++;
 8001618:	4b9f      	ldr	r3, [pc, #636]	; (8001898 <SysTick_Handler+0x288>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	4a9e      	ldr	r2, [pc, #632]	; (8001898 <SysTick_Handler+0x288>)
 8001620:	6013      	str	r3, [r2, #0]
	TennisSysTickCounter++;
 8001622:	4b9e      	ldr	r3, [pc, #632]	; (800189c <SysTick_Handler+0x28c>)
 8001624:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001628:	1c4b      	adds	r3, r1, #1
 800162a:	f142 0400 	adc.w	r4, r2, #0
 800162e:	4a9b      	ldr	r2, [pc, #620]	; (800189c <SysTick_Handler+0x28c>)
 8001630:	e9c2 3400 	strd	r3, r4, [r2]

	FlickerCounter++;
 8001634:	4b9a      	ldr	r3, [pc, #616]	; (80018a0 <SysTick_Handler+0x290>)
 8001636:	e9d3 1200 	ldrd	r1, r2, [r3]
 800163a:	1c4b      	adds	r3, r1, #1
 800163c:	f142 0400 	adc.w	r4, r2, #0
 8001640:	4a97      	ldr	r2, [pc, #604]	; (80018a0 <SysTick_Handler+0x290>)
 8001642:	e9c2 3400 	strd	r3, r4, [r2]

	if(sysTickCounter%300 == 0)
 8001646:	4b94      	ldr	r3, [pc, #592]	; (8001898 <SysTick_Handler+0x288>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b96      	ldr	r3, [pc, #600]	; (80018a4 <SysTick_Handler+0x294>)
 800164c:	fb83 1302 	smull	r1, r3, r3, r2
 8001650:	1159      	asrs	r1, r3, #5
 8001652:	17d3      	asrs	r3, r2, #31
 8001654:	1acb      	subs	r3, r1, r3
 8001656:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800165a:	fb01 f303 	mul.w	r3, r1, r3
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10e      	bne.n	8001682 <SysTick_Handler+0x72>
	{
		//player_toggle=1;
		ball_visible*=-1;
 8001664:	4b90      	ldr	r3, [pc, #576]	; (80018a8 <SysTick_Handler+0x298>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b25b      	sxtb	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	425b      	negs	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	b25a      	sxtb	r2, r3
 8001672:	4b8d      	ldr	r3, [pc, #564]	; (80018a8 <SysTick_Handler+0x298>)
 8001674:	701a      	strb	r2, [r3, #0]
		maze_ball_allowed_to_move=1;
 8001676:	4b8d      	ldr	r3, [pc, #564]	; (80018ac <SysTick_Handler+0x29c>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
		//set UART Transmit OK flag for maze game
		uart_transmit_ball_pos=1;
 800167c:	4b8c      	ldr	r3, [pc, #560]	; (80018b0 <SysTick_Handler+0x2a0>)
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]

	}

	//check if 100ms passed
	if(sysTickCounter%100==0)
 8001682:	4b85      	ldr	r3, [pc, #532]	; (8001898 <SysTick_Handler+0x288>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b8b      	ldr	r3, [pc, #556]	; (80018b4 <SysTick_Handler+0x2a4>)
 8001688:	fb83 1302 	smull	r1, r3, r3, r2
 800168c:	1159      	asrs	r1, r3, #5
 800168e:	17d3      	asrs	r3, r2, #31
 8001690:	1acb      	subs	r3, r1, r3
 8001692:	2164      	movs	r1, #100	; 0x64
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d114      	bne.n	80016c8 <SysTick_Handler+0xb8>
	{
		//set end goal toggle
		end_flicker=1;
 800169e:	4b86      	ldr	r3, [pc, #536]	; (80018b8 <SysTick_Handler+0x2a8>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
		end_toggle=1;
 80016a4:	4b85      	ldr	r3, [pc, #532]	; (80018bc <SysTick_Handler+0x2ac>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
		goal_visible*=-1;
 80016aa:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <SysTick_Handler+0x2b0>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	425b      	negs	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	b25a      	sxtb	r2, r3
 80016b8:	4b81      	ldr	r3, [pc, #516]	; (80018c0 <SysTick_Handler+0x2b0>)
 80016ba:	701a      	strb	r2, [r3, #0]
		bat_move=1;
 80016bc:	4b81      	ldr	r3, [pc, #516]	; (80018c4 <SysTick_Handler+0x2b4>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
		uart_transmit_tball_pos=1; //set flag to uart ball&bat position for tennis game
 80016c2:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <SysTick_Handler+0x2b8>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
	}



	if (button_bounce_timer == 0 && HAL_GPIO_ReadPin(GPIOA, S3_Pin) != middle_pressed_prev)
 80016c8:	4b80      	ldr	r3, [pc, #512]	; (80018cc <SysTick_Handler+0x2bc>)
 80016ca:	cb18      	ldmia	r3, {r3, r4}
 80016cc:	4323      	orrs	r3, r4
 80016ce:	d123      	bne.n	8001718 <SysTick_Handler+0x108>
 80016d0:	2110      	movs	r1, #16
 80016d2:	487f      	ldr	r0, [pc, #508]	; (80018d0 <SysTick_Handler+0x2c0>)
 80016d4:	f001 fb9a 	bl	8002e0c <HAL_GPIO_ReadPin>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	4b7d      	ldr	r3, [pc, #500]	; (80018d4 <SysTick_Handler+0x2c4>)
 80016de:	f993 3000 	ldrsb.w	r3, [r3]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d018      	beq.n	8001718 <SysTick_Handler+0x108>
	{
		//button de-bouncing
		if (HAL_GPIO_ReadPin(GPIOA, S3_Pin) == 0) {
 80016e6:	2110      	movs	r1, #16
 80016e8:	4879      	ldr	r0, [pc, #484]	; (80018d0 <SysTick_Handler+0x2c0>)
 80016ea:	f001 fb8f 	bl	8002e0c <HAL_GPIO_ReadPin>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d109      	bne.n	8001708 <SysTick_Handler+0xf8>
			middle_pressed = 1;
 80016f4:	4b78      	ldr	r3, [pc, #480]	; (80018d8 <SysTick_Handler+0x2c8>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
			button_bounce_timer = 1;
 80016fa:	4a74      	ldr	r2, [pc, #464]	; (80018cc <SysTick_Handler+0x2bc>)
 80016fc:	f04f 0301 	mov.w	r3, #1
 8001700:	f04f 0400 	mov.w	r4, #0
 8001704:	e9c2 3400 	strd	r3, r4, [r2]
		}
		middle_pressed_prev=HAL_GPIO_ReadPin(GPIOA, S3_Pin);
 8001708:	2110      	movs	r1, #16
 800170a:	4871      	ldr	r0, [pc, #452]	; (80018d0 <SysTick_Handler+0x2c0>)
 800170c:	f001 fb7e 	bl	8002e0c <HAL_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0
 8001712:	b25a      	sxtb	r2, r3
 8001714:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <SysTick_Handler+0x2c4>)
 8001716:	701a      	strb	r2, [r3, #0]
	}

	if (button_bounce_timer == 0 && HAL_GPIO_ReadPin(GPIOA, S4_Pin)!=right_pressed_prev)
 8001718:	4b6c      	ldr	r3, [pc, #432]	; (80018cc <SysTick_Handler+0x2bc>)
 800171a:	cb18      	ldmia	r3, {r3, r4}
 800171c:	4323      	orrs	r3, r4
 800171e:	d123      	bne.n	8001768 <SysTick_Handler+0x158>
 8001720:	2102      	movs	r1, #2
 8001722:	486b      	ldr	r0, [pc, #428]	; (80018d0 <SysTick_Handler+0x2c0>)
 8001724:	f001 fb72 	bl	8002e0c <HAL_GPIO_ReadPin>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	4b6b      	ldr	r3, [pc, #428]	; (80018dc <SysTick_Handler+0x2cc>)
 800172e:	f993 3000 	ldrsb.w	r3, [r3]
 8001732:	429a      	cmp	r2, r3
 8001734:	d018      	beq.n	8001768 <SysTick_Handler+0x158>
	{
		//button de-bouncing
		if (HAL_GPIO_ReadPin(GPIOA, S4_Pin)==0) {
 8001736:	2102      	movs	r1, #2
 8001738:	4865      	ldr	r0, [pc, #404]	; (80018d0 <SysTick_Handler+0x2c0>)
 800173a:	f001 fb67 	bl	8002e0c <HAL_GPIO_ReadPin>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <SysTick_Handler+0x148>
			right_pressed = 1;
 8001744:	4b66      	ldr	r3, [pc, #408]	; (80018e0 <SysTick_Handler+0x2d0>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
			button_bounce_timer = 1;
 800174a:	4a60      	ldr	r2, [pc, #384]	; (80018cc <SysTick_Handler+0x2bc>)
 800174c:	f04f 0301 	mov.w	r3, #1
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	e9c2 3400 	strd	r3, r4, [r2]
		}

//		right_pressed=1;
		right_pressed_prev=HAL_GPIO_ReadPin(GPIOA, S4_Pin);
 8001758:	2102      	movs	r1, #2
 800175a:	485d      	ldr	r0, [pc, #372]	; (80018d0 <SysTick_Handler+0x2c0>)
 800175c:	f001 fb56 	bl	8002e0c <HAL_GPIO_ReadPin>
 8001760:	4603      	mov	r3, r0
 8001762:	b25a      	sxtb	r2, r3
 8001764:	4b5d      	ldr	r3, [pc, #372]	; (80018dc <SysTick_Handler+0x2cc>)
 8001766:	701a      	strb	r2, [r3, #0]
	}


	if (button_bounce_timer == 0 && HAL_GPIO_ReadPin(GPIOC, S2_Pin)!=left_pressed_prev)
 8001768:	4b58      	ldr	r3, [pc, #352]	; (80018cc <SysTick_Handler+0x2bc>)
 800176a:	cb18      	ldmia	r3, {r3, r4}
 800176c:	4323      	orrs	r3, r4
 800176e:	d123      	bne.n	80017b8 <SysTick_Handler+0x1a8>
 8001770:	2102      	movs	r1, #2
 8001772:	485c      	ldr	r0, [pc, #368]	; (80018e4 <SysTick_Handler+0x2d4>)
 8001774:	f001 fb4a 	bl	8002e0c <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	4b5a      	ldr	r3, [pc, #360]	; (80018e8 <SysTick_Handler+0x2d8>)
 800177e:	f993 3000 	ldrsb.w	r3, [r3]
 8001782:	429a      	cmp	r2, r3
 8001784:	d018      	beq.n	80017b8 <SysTick_Handler+0x1a8>
	{
		//button de-bouncing
		if (HAL_GPIO_ReadPin(GPIOC, S2_Pin)==0) {
 8001786:	2102      	movs	r1, #2
 8001788:	4856      	ldr	r0, [pc, #344]	; (80018e4 <SysTick_Handler+0x2d4>)
 800178a:	f001 fb3f 	bl	8002e0c <HAL_GPIO_ReadPin>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d109      	bne.n	80017a8 <SysTick_Handler+0x198>
			left_pressed = 1;
 8001794:	4b55      	ldr	r3, [pc, #340]	; (80018ec <SysTick_Handler+0x2dc>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
			button_bounce_timer = 1;
 800179a:	4a4c      	ldr	r2, [pc, #304]	; (80018cc <SysTick_Handler+0x2bc>)
 800179c:	f04f 0301 	mov.w	r3, #1
 80017a0:	f04f 0400 	mov.w	r4, #0
 80017a4:	e9c2 3400 	strd	r3, r4, [r2]
		}

		left_pressed_prev=HAL_GPIO_ReadPin(GPIOC, S2_Pin);
 80017a8:	2102      	movs	r1, #2
 80017aa:	484e      	ldr	r0, [pc, #312]	; (80018e4 <SysTick_Handler+0x2d4>)
 80017ac:	f001 fb2e 	bl	8002e0c <HAL_GPIO_ReadPin>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b25a      	sxtb	r2, r3
 80017b4:	4b4c      	ldr	r3, [pc, #304]	; (80018e8 <SysTick_Handler+0x2d8>)
 80017b6:	701a      	strb	r2, [r3, #0]
	}

	if (button_bounce_timer == 0 && HAL_GPIO_ReadPin(GPIOB, S1_Pin)!=up_pressed_prev)
 80017b8:	4b44      	ldr	r3, [pc, #272]	; (80018cc <SysTick_Handler+0x2bc>)
 80017ba:	cb18      	ldmia	r3, {r3, r4}
 80017bc:	4323      	orrs	r3, r4
 80017be:	d123      	bne.n	8001808 <SysTick_Handler+0x1f8>
 80017c0:	2101      	movs	r1, #1
 80017c2:	484b      	ldr	r0, [pc, #300]	; (80018f0 <SysTick_Handler+0x2e0>)
 80017c4:	f001 fb22 	bl	8002e0c <HAL_GPIO_ReadPin>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <SysTick_Handler+0x2e4>)
 80017ce:	f993 3000 	ldrsb.w	r3, [r3]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d018      	beq.n	8001808 <SysTick_Handler+0x1f8>
	{
		//button de-bouncing
		if (HAL_GPIO_ReadPin(GPIOB, S1_Pin)==0) {
 80017d6:	2101      	movs	r1, #1
 80017d8:	4845      	ldr	r0, [pc, #276]	; (80018f0 <SysTick_Handler+0x2e0>)
 80017da:	f001 fb17 	bl	8002e0c <HAL_GPIO_ReadPin>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <SysTick_Handler+0x1e8>
			up_pressed = 1;
 80017e4:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <SysTick_Handler+0x2e8>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
			button_bounce_timer = 1;
 80017ea:	4a38      	ldr	r2, [pc, #224]	; (80018cc <SysTick_Handler+0x2bc>)
 80017ec:	f04f 0301 	mov.w	r3, #1
 80017f0:	f04f 0400 	mov.w	r4, #0
 80017f4:	e9c2 3400 	strd	r3, r4, [r2]
		}

		up_pressed_prev=HAL_GPIO_ReadPin(GPIOB, S1_Pin);
 80017f8:	2101      	movs	r1, #1
 80017fa:	483d      	ldr	r0, [pc, #244]	; (80018f0 <SysTick_Handler+0x2e0>)
 80017fc:	f001 fb06 	bl	8002e0c <HAL_GPIO_ReadPin>
 8001800:	4603      	mov	r3, r0
 8001802:	b25a      	sxtb	r2, r3
 8001804:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <SysTick_Handler+0x2e4>)
 8001806:	701a      	strb	r2, [r3, #0]
	}

	if (button_bounce_timer == 0 && HAL_GPIO_ReadPin(GPIOC, S5_Pin)!=down_pressed_prev)
 8001808:	4b30      	ldr	r3, [pc, #192]	; (80018cc <SysTick_Handler+0x2bc>)
 800180a:	cb18      	ldmia	r3, {r3, r4}
 800180c:	4323      	orrs	r3, r4
 800180e:	d123      	bne.n	8001858 <SysTick_Handler+0x248>
 8001810:	2101      	movs	r1, #1
 8001812:	4834      	ldr	r0, [pc, #208]	; (80018e4 <SysTick_Handler+0x2d4>)
 8001814:	f001 fafa 	bl	8002e0c <HAL_GPIO_ReadPin>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b37      	ldr	r3, [pc, #220]	; (80018fc <SysTick_Handler+0x2ec>)
 800181e:	f993 3000 	ldrsb.w	r3, [r3]
 8001822:	429a      	cmp	r2, r3
 8001824:	d018      	beq.n	8001858 <SysTick_Handler+0x248>
	{
		//button de-bouncing
		if (HAL_GPIO_ReadPin(GPIOC, S5_Pin)==0) {
 8001826:	2101      	movs	r1, #1
 8001828:	482e      	ldr	r0, [pc, #184]	; (80018e4 <SysTick_Handler+0x2d4>)
 800182a:	f001 faef 	bl	8002e0c <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <SysTick_Handler+0x238>
			down_pressed = 1;
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <SysTick_Handler+0x2f0>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
			button_bounce_timer = 1;
 800183a:	4a24      	ldr	r2, [pc, #144]	; (80018cc <SysTick_Handler+0x2bc>)
 800183c:	f04f 0301 	mov.w	r3, #1
 8001840:	f04f 0400 	mov.w	r4, #0
 8001844:	e9c2 3400 	strd	r3, r4, [r2]
		}

		down_pressed_prev=HAL_GPIO_ReadPin(GPIOC, S5_Pin);
 8001848:	2101      	movs	r1, #1
 800184a:	4826      	ldr	r0, [pc, #152]	; (80018e4 <SysTick_Handler+0x2d4>)
 800184c:	f001 fade 	bl	8002e0c <HAL_GPIO_ReadPin>
 8001850:	4603      	mov	r3, r0
 8001852:	b25a      	sxtb	r2, r3
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <SysTick_Handler+0x2ec>)
 8001856:	701a      	strb	r2, [r3, #0]
	}

//	middle_pressed_prev=HAL_GPIO_ReadPin(GPIOA, S3_Pin);
	if (button_bounce_timer > 50) button_bounce_timer = 0; //Button bounce reset
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <SysTick_Handler+0x2bc>)
 800185a:	cb18      	ldmia	r3, {r3, r4}
 800185c:	2b33      	cmp	r3, #51	; 0x33
 800185e:	f174 0300 	sbcs.w	r3, r4, #0
 8001862:	db07      	blt.n	8001874 <SysTick_Handler+0x264>
 8001864:	4a19      	ldr	r2, [pc, #100]	; (80018cc <SysTick_Handler+0x2bc>)
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	f04f 0400 	mov.w	r4, #0
 800186e:	e9c2 3400 	strd	r3, r4, [r2]
 8001872:	e00c      	b.n	800188e <SysTick_Handler+0x27e>
	else if (button_bounce_timer != 0) button_bounce_timer++;
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <SysTick_Handler+0x2bc>)
 8001876:	cb18      	ldmia	r3, {r3, r4}
 8001878:	4323      	orrs	r3, r4
 800187a:	d008      	beq.n	800188e <SysTick_Handler+0x27e>
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <SysTick_Handler+0x2bc>)
 800187e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001882:	1c4b      	adds	r3, r1, #1
 8001884:	f142 0400 	adc.w	r4, r2, #0
 8001888:	4a10      	ldr	r2, [pc, #64]	; (80018cc <SysTick_Handler+0x2bc>)
 800188a:	e9c2 3400 	strd	r3, r4, [r2]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188e:	f000 fe0d 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd98      	pop	{r3, r4, r7, pc}
 8001896:	bf00      	nop
 8001898:	2000026c 	.word	0x2000026c
 800189c:	200003c8 	.word	0x200003c8
 80018a0:	200003b8 	.word	0x200003b8
 80018a4:	1b4e81b5 	.word	0x1b4e81b5
 80018a8:	20000212 	.word	0x20000212
 80018ac:	20000211 	.word	0x20000211
 80018b0:	2000020f 	.word	0x2000020f
 80018b4:	51eb851f 	.word	0x51eb851f
 80018b8:	20000210 	.word	0x20000210
 80018bc:	2000020d 	.word	0x2000020d
 80018c0:	20000213 	.word	0x20000213
 80018c4:	20000280 	.word	0x20000280
 80018c8:	200003b0 	.word	0x200003b0
 80018cc:	20000270 	.word	0x20000270
 80018d0:	40010800 	.word	0x40010800
 80018d4:	20000220 	.word	0x20000220
 80018d8:	200003ac 	.word	0x200003ac
 80018dc:	200003c1 	.word	0x200003c1
 80018e0:	200003b1 	.word	0x200003b1
 80018e4:	40011000 	.word	0x40011000
 80018e8:	200003c0 	.word	0x200003c0
 80018ec:	20000308 	.word	0x20000308
 80018f0:	40010c00 	.word	0x40010c00
 80018f4:	200003c3 	.word	0x200003c3
 80018f8:	20000363 	.word	0x20000363
 80018fc:	200003c2 	.word	0x200003c2
 8001900:	200003aa 	.word	0x200003aa

08001904 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001908:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800190c:	f001 faae 	bl	8002e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <construct_tennis_game>:
int16_t speed=0;

uint8_t tennis_message[10] = "$2xyvdxy_\n";

void construct_tennis_game()
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
	TennisSysTickCounter = 0;
 8001926:	4a24      	ldr	r2, [pc, #144]	; (80019b8 <construct_tennis_game+0x98>)
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	f04f 0400 	mov.w	r4, #0
 8001930:	e9c2 3400 	strd	r3, r4, [r2]
	ball_angle=0;
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <construct_tennis_game+0x9c>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
	speed=0;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <construct_tennis_game+0xa0>)
 800193c:	2200      	movs	r2, #0
 800193e:	801a      	strh	r2, [r3, #0]
	Number_Of_Bounces=0;
 8001940:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <construct_tennis_game+0xa4>)
 8001942:	2200      	movs	r2, #0
 8001944:	801a      	strh	r2, [r3, #0]
	ball_velocity=700;
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <construct_tennis_game+0xa8>)
 8001948:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800194c:	801a      	strh	r2, [r3, #0]
	uart_transmit_tball_pos = 0;
 800194e:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <construct_tennis_game+0xac>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
	for (int col; col<8;col++)
 8001954:	e006      	b.n	8001964 <construct_tennis_game+0x44>
	{
		set_LED_Column(col, 0);
 8001956:	2100      	movs	r1, #0
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7fe ff39 	bl	80007d0 <set_LED_Column>
	for (int col; col<8;col++)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3301      	adds	r3, #1
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b07      	cmp	r3, #7
 8001968:	ddf5      	ble.n	8001956 <construct_tennis_game+0x36>
	}

	tball.batXpos=0;
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <construct_tennis_game+0xb0>)
 800196c:	2200      	movs	r2, #0
 800196e:	711a      	strb	r2, [r3, #4]
	tball.batYpos1=4;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <construct_tennis_game+0xb0>)
 8001972:	2204      	movs	r2, #4
 8001974:	715a      	strb	r2, [r3, #5]
	tball.batYpos2=5;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <construct_tennis_game+0xb0>)
 8001978:	2205      	movs	r2, #5
 800197a:	719a      	strb	r2, [r3, #6]
	tball.ballXpos=7;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <construct_tennis_game+0xb0>)
 800197e:	2207      	movs	r2, #7
 8001980:	701a      	strb	r2, [r3, #0]
	tball.ballYpos=4;
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <construct_tennis_game+0xb0>)
 8001984:	2204      	movs	r2, #4
 8001986:	705a      	strb	r2, [r3, #1]
	tball.ballXprev=7;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <construct_tennis_game+0xb0>)
 800198a:	2207      	movs	r2, #7
 800198c:	709a      	strb	r2, [r3, #2]
	tball.ballYprev=4;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <construct_tennis_game+0xb0>)
 8001990:	2204      	movs	r2, #4
 8001992:	70da      	strb	r2, [r3, #3]
	display[0][0]=0;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <construct_tennis_game+0xb4>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
	display[0][7]=0;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <construct_tennis_game+0xb4>)
 800199c:	2200      	movs	r2, #0
 800199e:	71da      	strb	r2, [r3, #7]
	display[7][0]=0;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <construct_tennis_game+0xb4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	display[7][7]=0;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <construct_tennis_game+0xb4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f


}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}
 80019b8:	200003c8 	.word	0x200003c8
 80019bc:	20000281 	.word	0x20000281
 80019c0:	20000284 	.word	0x20000284
 80019c4:	20000282 	.word	0x20000282
 80019c8:	2000022a 	.word	0x2000022a
 80019cc:	200003b0 	.word	0x200003b0
 80019d0:	200003d0 	.word	0x200003d0
 80019d4:	20000288 	.word	0x20000288

080019d8 <tennis_game>:


void tennis_game()
{
 80019d8:	b598      	push	{r3, r4, r7, lr}
 80019da:	af00      	add	r7, sp, #0
	if (tennis_game_counter == 0)
 80019dc:	4bae      	ldr	r3, [pc, #696]	; (8001c98 <tennis_game+0x2c0>)
 80019de:	cb18      	ldmia	r3, {r3, r4}
 80019e0:	4323      	orrs	r3, r4
 80019e2:	d10b      	bne.n	80019fc <tennis_game+0x24>
	{
		construct_tennis_game();
 80019e4:	f7ff ff9c 	bl	8001920 <construct_tennis_game>
		tennis_game_counter++;
 80019e8:	4bab      	ldr	r3, [pc, #684]	; (8001c98 <tennis_game+0x2c0>)
 80019ea:	e9d3 1200 	ldrd	r1, r2, [r3]
 80019ee:	1c4b      	adds	r3, r1, #1
 80019f0:	f142 0400 	adc.w	r4, r2, #0
 80019f4:	4aa8      	ldr	r2, [pc, #672]	; (8001c98 <tennis_game+0x2c0>)
 80019f6:	e9c2 3400 	strd	r3, r4, [r2]
 80019fa:	e008      	b.n	8001a0e <tennis_game+0x36>
	} else
	{
		tennis_game_counter++;
 80019fc:	4ba6      	ldr	r3, [pc, #664]	; (8001c98 <tennis_game+0x2c0>)
 80019fe:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001a02:	1c4b      	adds	r3, r1, #1
 8001a04:	f142 0400 	adc.w	r4, r2, #0
 8001a08:	4aa3      	ldr	r2, [pc, #652]	; (8001c98 <tennis_game+0x2c0>)
 8001a0a:	e9c2 3400 	strd	r3, r4, [r2]
	}


	if(Number_Of_Bounces/3 < 10)
 8001a0e:	4ba3      	ldr	r3, [pc, #652]	; (8001c9c <tennis_game+0x2c4>)
 8001a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a14:	2b1d      	cmp	r3, #29
 8001a16:	dc26      	bgt.n	8001a66 <tennis_game+0x8e>
	{
		ball_velocity = 700 - (Number_Of_Bounces/3)*50;
 8001a18:	4ba0      	ldr	r3, [pc, #640]	; (8001c9c <tennis_game+0x2c4>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	4aa0      	ldr	r2, [pc, #640]	; (8001ca0 <tennis_game+0x2c8>)
 8001a20:	fb82 1203 	smull	r1, r2, r2, r3
 8001a24:	17db      	asrs	r3, r3, #31
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	0292      	lsls	r2, r2, #10
 8001a30:	1ad2      	subs	r2, r2, r3
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	441a      	add	r2, r3
 8001a36:	00d2      	lsls	r2, r2, #3
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	4b97      	ldr	r3, [pc, #604]	; (8001ca4 <tennis_game+0x2cc>)
 8001a48:	801a      	strh	r2, [r3, #0]
		speed=(700-ball_velocity)/50;
 8001a4a:	4b96      	ldr	r3, [pc, #600]	; (8001ca4 <tennis_game+0x2cc>)
 8001a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a50:	f5c3 732f 	rsb	r3, r3, #700	; 0x2bc
 8001a54:	4a94      	ldr	r2, [pc, #592]	; (8001ca8 <tennis_game+0x2d0>)
 8001a56:	fb82 1203 	smull	r1, r2, r2, r3
 8001a5a:	1112      	asrs	r2, r2, #4
 8001a5c:	17db      	asrs	r3, r3, #31
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	4b92      	ldr	r3, [pc, #584]	; (8001cac <tennis_game+0x2d4>)
 8001a64:	801a      	strh	r2, [r3, #0]
	}

	if(TennisSysTickCounter >= ball_velocity){
 8001a66:	4b8f      	ldr	r3, [pc, #572]	; (8001ca4 <tennis_game+0x2cc>)
 8001a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a72:	4a8f      	ldr	r2, [pc, #572]	; (8001cb0 <tennis_game+0x2d8>)
 8001a74:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001a78:	4299      	cmp	r1, r3
 8001a7a:	eb72 0304 	sbcs.w	r3, r2, r4
 8001a7e:	db0a      	blt.n	8001a96 <tennis_game+0xbe>
		TennisSysTickCounter=0;
 8001a80:	4a8b      	ldr	r2, [pc, #556]	; (8001cb0 <tennis_game+0x2d8>)
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	f04f 0400 	mov.w	r4, #0
 8001a8a:	e9c2 3400 	strd	r3, r4, [r2]
		collision_detection();
 8001a8e:	f000 f9f7 	bl	8001e80 <collision_detection>
		move_ball();
 8001a92:	f000 fc0d 	bl	80022b0 <move_ball>
	}


	if((tball.ballXpos!=tball.ballXprev)||(tball.ballYpos!=tball.ballYprev))
 8001a96:	4b87      	ldr	r3, [pc, #540]	; (8001cb4 <tennis_game+0x2dc>)
 8001a98:	f993 2000 	ldrsb.w	r2, [r3]
 8001a9c:	4b85      	ldr	r3, [pc, #532]	; (8001cb4 <tennis_game+0x2dc>)
 8001a9e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d107      	bne.n	8001ab6 <tennis_game+0xde>
 8001aa6:	4b83      	ldr	r3, [pc, #524]	; (8001cb4 <tennis_game+0x2dc>)
 8001aa8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001aac:	4b81      	ldr	r3, [pc, #516]	; (8001cb4 <tennis_game+0x2dc>)
 8001aae:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d00d      	beq.n	8001ad2 <tennis_game+0xfa>
	{
		display[tball.ballYprev][tball.ballXprev] = 0;
 8001ab6:	4b7f      	ldr	r3, [pc, #508]	; (8001cb4 <tennis_game+0x2dc>)
 8001ab8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001abc:	4618      	mov	r0, r3
 8001abe:	4b7d      	ldr	r3, [pc, #500]	; (8001cb4 <tennis_game+0x2dc>)
 8001ac0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4a7c      	ldr	r2, [pc, #496]	; (8001cb8 <tennis_game+0x2e0>)
 8001ac8:	00c3      	lsls	r3, r0, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
	}
	if((tball.batXpos!=tball.batXprev)||(tball.batYpos1!=tball.batYprev1))
 8001ad2:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <tennis_game+0x2dc>)
 8001ad4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001ad8:	4b76      	ldr	r3, [pc, #472]	; (8001cb4 <tennis_game+0x2dc>)
 8001ada:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d107      	bne.n	8001af2 <tennis_game+0x11a>
 8001ae2:	4b74      	ldr	r3, [pc, #464]	; (8001cb4 <tennis_game+0x2dc>)
 8001ae4:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8001ae8:	4b72      	ldr	r3, [pc, #456]	; (8001cb4 <tennis_game+0x2dc>)
 8001aea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d01b      	beq.n	8001b2a <tennis_game+0x152>
	{
		display[tball.batYprev1][tball.batXprev] = 0;
 8001af2:	4b70      	ldr	r3, [pc, #448]	; (8001cb4 <tennis_game+0x2dc>)
 8001af4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001af8:	4618      	mov	r0, r3
 8001afa:	4b6e      	ldr	r3, [pc, #440]	; (8001cb4 <tennis_game+0x2dc>)
 8001afc:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001b00:	4619      	mov	r1, r3
 8001b02:	4a6d      	ldr	r2, [pc, #436]	; (8001cb8 <tennis_game+0x2e0>)
 8001b04:	00c3      	lsls	r3, r0, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
		display[tball.batYprev2][tball.batXprev] = 0;
 8001b0e:	4b69      	ldr	r3, [pc, #420]	; (8001cb4 <tennis_game+0x2dc>)
 8001b10:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001b14:	4618      	mov	r0, r3
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <tennis_game+0x2dc>)
 8001b18:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4a66      	ldr	r2, [pc, #408]	; (8001cb8 <tennis_game+0x2e0>)
 8001b20:	00c3      	lsls	r3, r0, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
	}

	tball.ballXprev=tball.ballXpos;
 8001b2a:	4b62      	ldr	r3, [pc, #392]	; (8001cb4 <tennis_game+0x2dc>)
 8001b2c:	f993 2000 	ldrsb.w	r2, [r3]
 8001b30:	4b60      	ldr	r3, [pc, #384]	; (8001cb4 <tennis_game+0x2dc>)
 8001b32:	709a      	strb	r2, [r3, #2]
	tball.ballYprev=tball.ballYpos;
 8001b34:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <tennis_game+0x2dc>)
 8001b36:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001b3a:	4b5e      	ldr	r3, [pc, #376]	; (8001cb4 <tennis_game+0x2dc>)
 8001b3c:	70da      	strb	r2, [r3, #3]

	tball.batXprev=tball.batXpos;
 8001b3e:	4b5d      	ldr	r3, [pc, #372]	; (8001cb4 <tennis_game+0x2dc>)
 8001b40:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001b44:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <tennis_game+0x2dc>)
 8001b46:	71da      	strb	r2, [r3, #7]
	tball.batYprev1=tball.batYpos1;
 8001b48:	4b5a      	ldr	r3, [pc, #360]	; (8001cb4 <tennis_game+0x2dc>)
 8001b4a:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8001b4e:	4b59      	ldr	r3, [pc, #356]	; (8001cb4 <tennis_game+0x2dc>)
 8001b50:	721a      	strb	r2, [r3, #8]
	tball.batYprev2=tball.batYpos2;
 8001b52:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <tennis_game+0x2dc>)
 8001b54:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8001b58:	4b56      	ldr	r3, [pc, #344]	; (8001cb4 <tennis_game+0x2dc>)
 8001b5a:	725a      	strb	r2, [r3, #9]


	if(ax>8192){ //sin30*16384, 16384 max positive raw value
 8001b5c:	4b57      	ldr	r3, [pc, #348]	; (8001cbc <tennis_game+0x2e4>)
 8001b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b66:	dd06      	ble.n	8001b76 <tennis_game+0x19e>
		left_pressed=1;
 8001b68:	4b55      	ldr	r3, [pc, #340]	; (8001cc0 <tennis_game+0x2e8>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
		IMU_CharT=76;
 8001b6e:	4b55      	ldr	r3, [pc, #340]	; (8001cc4 <tennis_game+0x2ec>)
 8001b70:	224c      	movs	r2, #76	; 0x4c
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	e029      	b.n	8001bca <tennis_game+0x1f2>
	}
	else if(ax<-8192){
 8001b76:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <tennis_game+0x2e4>)
 8001b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7c:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 8001b80:	da06      	bge.n	8001b90 <tennis_game+0x1b8>
		right_pressed=1;
 8001b82:	4b51      	ldr	r3, [pc, #324]	; (8001cc8 <tennis_game+0x2f0>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
		IMU_CharT=82;
 8001b88:	4b4e      	ldr	r3, [pc, #312]	; (8001cc4 <tennis_game+0x2ec>)
 8001b8a:	2252      	movs	r2, #82	; 0x52
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e01c      	b.n	8001bca <tennis_game+0x1f2>
	}
	else if(ay>8192){
 8001b90:	4b4e      	ldr	r3, [pc, #312]	; (8001ccc <tennis_game+0x2f4>)
 8001b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b9a:	dd06      	ble.n	8001baa <tennis_game+0x1d2>
		down_pressed=1;
 8001b9c:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <tennis_game+0x2f8>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
		IMU_CharT=68;
 8001ba2:	4b48      	ldr	r3, [pc, #288]	; (8001cc4 <tennis_game+0x2ec>)
 8001ba4:	2244      	movs	r2, #68	; 0x44
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	e00f      	b.n	8001bca <tennis_game+0x1f2>
	}
	else if(ay<-8192){
 8001baa:	4b48      	ldr	r3, [pc, #288]	; (8001ccc <tennis_game+0x2f4>)
 8001bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb0:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 8001bb4:	da06      	bge.n	8001bc4 <tennis_game+0x1ec>
		up_pressed=1;
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <tennis_game+0x2fc>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
		IMU_CharT=85;
 8001bbc:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <tennis_game+0x2ec>)
 8001bbe:	2255      	movs	r2, #85	; 0x55
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	e002      	b.n	8001bca <tennis_game+0x1f2>
	}else{
		IMU_CharT=78;
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <tennis_game+0x2ec>)
 8001bc6:	224e      	movs	r2, #78	; 0x4e
 8001bc8:	701a      	strb	r2, [r3, #0]
//		right_pressed=0;
//		up_pressed=0;
	}


	if(bat_move==1){
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <tennis_game+0x300>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	f040 80cd 	bne.w	8001d70 <tennis_game+0x398>
		bat_move=0;
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <tennis_game+0x300>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]

		if(right_pressed==1)
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <tennis_game+0x2f0>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d11b      	bne.n	8001c1e <tennis_game+0x246>
		{
			right_pressed=0;
 8001be6:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <tennis_game+0x2f0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
			//line below is for collision detection
			if(tball.batXpos>=5){
 8001bec:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <tennis_game+0x2dc>)
 8001bee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	dd05      	ble.n	8001c02 <tennis_game+0x22a>
				tball.batXpos=tball.batXpos;
 8001bf6:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <tennis_game+0x2dc>)
 8001bf8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <tennis_game+0x2dc>)
 8001bfe:	711a      	strb	r2, [r3, #4]
 8001c00:	e00d      	b.n	8001c1e <tennis_game+0x246>
			}else if (tball.batXpos<5)
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <tennis_game+0x2dc>)
 8001c04:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	dc08      	bgt.n	8001c1e <tennis_game+0x246>
			{
				tball.batXpos=tball.batXpos+1;
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <tennis_game+0x2dc>)
 8001c0e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	3301      	adds	r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	b25a      	sxtb	r2, r3
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <tennis_game+0x2dc>)
 8001c1c:	711a      	strb	r2, [r3, #4]
			}
		}

		if(left_pressed==1)
 8001c1e:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <tennis_game+0x2e8>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b25b      	sxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d11b      	bne.n	8001c60 <tennis_game+0x288>
		{
			left_pressed=0;
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <tennis_game+0x2e8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
			//line below is for collision detection
			if(tball.batXpos<=0){
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <tennis_game+0x2dc>)
 8001c30:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	dc05      	bgt.n	8001c44 <tennis_game+0x26c>
				tball.batXpos=tball.batXpos;
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <tennis_game+0x2dc>)
 8001c3a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <tennis_game+0x2dc>)
 8001c40:	711a      	strb	r2, [r3, #4]
 8001c42:	e00d      	b.n	8001c60 <tennis_game+0x288>
			}else if (tball.batXpos>0)
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <tennis_game+0x2dc>)
 8001c46:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dd08      	ble.n	8001c60 <tennis_game+0x288>
			{
				tball.batXpos=tball.batXpos-1;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <tennis_game+0x2dc>)
 8001c50:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	b25a      	sxtb	r2, r3
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <tennis_game+0x2dc>)
 8001c5e:	711a      	strb	r2, [r3, #4]
			}
		}

		if(up_pressed==1)
 8001c60:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <tennis_game+0x2fc>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d14f      	bne.n	8001d0a <tennis_game+0x332>
		{
			up_pressed=0;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <tennis_game+0x2fc>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
			//line below is for collision detection
			if(tball.batYpos1<=0){
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <tennis_game+0x2dc>)
 8001c72:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dc30      	bgt.n	8001cdc <tennis_game+0x304>
				tball.batYpos1=tball.batYpos1;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <tennis_game+0x2dc>)
 8001c7c:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <tennis_game+0x2dc>)
 8001c82:	715a      	strb	r2, [r3, #5]
				tball.batYpos2=tball.batYpos1+1;
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <tennis_game+0x2dc>)
 8001c86:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	b25a      	sxtb	r2, r3
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <tennis_game+0x2dc>)
 8001c94:	719a      	strb	r2, [r3, #6]
 8001c96:	e038      	b.n	8001d0a <tennis_game+0x332>
 8001c98:	20000278 	.word	0x20000278
 8001c9c:	20000282 	.word	0x20000282
 8001ca0:	55555556 	.word	0x55555556
 8001ca4:	2000022a 	.word	0x2000022a
 8001ca8:	51eb851f 	.word	0x51eb851f
 8001cac:	20000284 	.word	0x20000284
 8001cb0:	200003c8 	.word	0x200003c8
 8001cb4:	200003d0 	.word	0x200003d0
 8001cb8:	20000288 	.word	0x20000288
 8001cbc:	2000039e 	.word	0x2000039e
 8001cc0:	20000308 	.word	0x20000308
 8001cc4:	20000228 	.word	0x20000228
 8001cc8:	200003b1 	.word	0x200003b1
 8001ccc:	200003ae 	.word	0x200003ae
 8001cd0:	200003aa 	.word	0x200003aa
 8001cd4:	20000363 	.word	0x20000363
 8001cd8:	20000280 	.word	0x20000280
			}else
				if (tball.batYpos1>0)
 8001cdc:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <tennis_game+0x484>)
 8001cde:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	dd11      	ble.n	8001d0a <tennis_game+0x332>
				{
					tball.batYpos1=tball.batYpos1-1;
 8001ce6:	4b5d      	ldr	r3, [pc, #372]	; (8001e5c <tennis_game+0x484>)
 8001ce8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	b25a      	sxtb	r2, r3
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <tennis_game+0x484>)
 8001cf6:	715a      	strb	r2, [r3, #5]
					tball.batYpos2=tball.batYpos1+1;
 8001cf8:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <tennis_game+0x484>)
 8001cfa:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	b25a      	sxtb	r2, r3
 8001d06:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <tennis_game+0x484>)
 8001d08:	719a      	strb	r2, [r3, #6]
				}

		}

		if(down_pressed==1)
 8001d0a:	4b55      	ldr	r3, [pc, #340]	; (8001e60 <tennis_game+0x488>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b25b      	sxtb	r3, r3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d12d      	bne.n	8001d70 <tennis_game+0x398>
		{
			down_pressed=0;
 8001d14:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <tennis_game+0x488>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
			//line below is for collision detection
			if(tball.batYpos1>=6){
 8001d1a:	4b50      	ldr	r3, [pc, #320]	; (8001e5c <tennis_game+0x484>)
 8001d1c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	dd0e      	ble.n	8001d42 <tennis_game+0x36a>
				tball.batYpos1=tball.batYpos1;
 8001d24:	4b4d      	ldr	r3, [pc, #308]	; (8001e5c <tennis_game+0x484>)
 8001d26:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <tennis_game+0x484>)
 8001d2c:	715a      	strb	r2, [r3, #5]
				tball.batYpos2=tball.batYpos1+1;
 8001d2e:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <tennis_game+0x484>)
 8001d30:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	b25a      	sxtb	r2, r3
 8001d3c:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <tennis_game+0x484>)
 8001d3e:	719a      	strb	r2, [r3, #6]
 8001d40:	e016      	b.n	8001d70 <tennis_game+0x398>
			}else if (tball.batYpos1<6)
 8001d42:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <tennis_game+0x484>)
 8001d44:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	dc11      	bgt.n	8001d70 <tennis_game+0x398>
			{
				tball.batYpos1=tball.batYpos1+1;
 8001d4c:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <tennis_game+0x484>)
 8001d4e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3301      	adds	r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	b25a      	sxtb	r2, r3
 8001d5a:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <tennis_game+0x484>)
 8001d5c:	715a      	strb	r2, [r3, #5]
				tball.batYpos2=tball.batYpos1+1;
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <tennis_game+0x484>)
 8001d60:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	b25a      	sxtb	r2, r3
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <tennis_game+0x484>)
 8001d6e:	719a      	strb	r2, [r3, #6]
		//		tball.batYpos2=tball.batYpos1+1;
		//		tball.batYpos1=((sampled_value*7)/4095);
		//		tball.batYpos2=tball.batYpos1+1;
	}

	if(tball.ballXpos<0)
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <tennis_game+0x484>)
 8001d72:	f993 3000 	ldrsb.w	r3, [r3]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	da01      	bge.n	8001d7e <tennis_game+0x3a6>
	{
		tennis_gameStop();
 8001d7a:	f000 fb0d 	bl	8002398 <tennis_gameStop>
	}


	display[tball.ballYpos][tball.ballXpos] = 1;
 8001d7e:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <tennis_game+0x484>)
 8001d80:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d84:	4618      	mov	r0, r3
 8001d86:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <tennis_game+0x484>)
 8001d88:	f993 3000 	ldrsb.w	r3, [r3]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4a35      	ldr	r2, [pc, #212]	; (8001e64 <tennis_game+0x48c>)
 8001d90:	00c3      	lsls	r3, r0, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
	display[tball.batYpos1][tball.batXpos] = 1;
 8001d9a:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <tennis_game+0x484>)
 8001d9c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001da0:	4618      	mov	r0, r3
 8001da2:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <tennis_game+0x484>)
 8001da4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001da8:	4619      	mov	r1, r3
 8001daa:	4a2e      	ldr	r2, [pc, #184]	; (8001e64 <tennis_game+0x48c>)
 8001dac:	00c3      	lsls	r3, r0, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
	display[tball.batYpos2][tball.batXpos] = 1;
 8001db6:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <tennis_game+0x484>)
 8001db8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <tennis_game+0x484>)
 8001dc0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <tennis_game+0x48c>)
 8001dc8:	00c3      	lsls	r3, r0, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]

	if(uart_transmit_tball_pos==1)
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <tennis_game+0x490>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b25b      	sxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d13c      	bne.n	8001e56 <tennis_game+0x47e>
	{
		uart_transmit_tball_pos = 0;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <tennis_game+0x490>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
		tennis_message[2] = (tball.ballXpos + 48);
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <tennis_game+0x484>)
 8001de4:	f993 3000 	ldrsb.w	r3, [r3]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	3330      	adds	r3, #48	; 0x30
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <tennis_game+0x494>)
 8001df0:	709a      	strb	r2, [r3, #2]
		tennis_message[3] = (tball.ballYpos + 48);
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <tennis_game+0x484>)
 8001df4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3330      	adds	r3, #48	; 0x30
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <tennis_game+0x494>)
 8001e00:	70da      	strb	r2, [r3, #3]
		tennis_message[4] = ((speed+1) + 48);
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <tennis_game+0x498>)
 8001e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	3331      	adds	r3, #49	; 0x31
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <tennis_game+0x494>)
 8001e10:	711a      	strb	r2, [r3, #4]
		tennis_message[5] = (ball_angle + 48);
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <tennis_game+0x49c>)
 8001e14:	f993 3000 	ldrsb.w	r3, [r3]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	3330      	adds	r3, #48	; 0x30
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <tennis_game+0x494>)
 8001e20:	715a      	strb	r2, [r3, #5]
		tennis_message[6] = (tball.batXpos + 48);
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <tennis_game+0x484>)
 8001e24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	3330      	adds	r3, #48	; 0x30
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <tennis_game+0x494>)
 8001e30:	719a      	strb	r2, [r3, #6]
		tennis_message[7] = (tball.batYpos1 + 48);
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <tennis_game+0x484>)
 8001e34:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	3330      	adds	r3, #48	; 0x30
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <tennis_game+0x494>)
 8001e40:	71da      	strb	r2, [r3, #7]
		tennis_message[8] = (IMU_CharT);
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <tennis_game+0x4a0>)
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <tennis_game+0x494>)
 8001e48:	721a      	strb	r2, [r3, #8]
		HAL_UART_Transmit(&huart2, (uint8_t*)tennis_message, 10, 50);
 8001e4a:	2332      	movs	r3, #50	; 0x32
 8001e4c:	220a      	movs	r2, #10
 8001e4e:	4907      	ldr	r1, [pc, #28]	; (8001e6c <tennis_game+0x494>)
 8001e50:	480a      	ldr	r0, [pc, #40]	; (8001e7c <tennis_game+0x4a4>)
 8001e52:	f002 f97e 	bl	8004152 <HAL_UART_Transmit>
	}

}
 8001e56:	bf00      	nop
 8001e58:	bd98      	pop	{r3, r4, r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200003d0 	.word	0x200003d0
 8001e60:	200003aa 	.word	0x200003aa
 8001e64:	20000288 	.word	0x20000288
 8001e68:	200003b0 	.word	0x200003b0
 8001e6c:	2000022c 	.word	0x2000022c
 8001e70:	20000284 	.word	0x20000284
 8001e74:	20000281 	.word	0x20000281
 8001e78:	20000228 	.word	0x20000228
 8001e7c:	200002c8 	.word	0x200002c8

08001e80 <collision_detection>:

void collision_detection()
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	//weird top left cases
	if((tball.ballXpos-1==0) && (tball.ballYpos-1==-1) && (ball_angle==3))
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <collision_detection+0x130>)
 8001e86:	f993 3000 	ldrsb.w	r3, [r3]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d11e      	bne.n	8001ecc <collision_detection+0x4c>
 8001e8e:	4b48      	ldr	r3, [pc, #288]	; (8001fb0 <collision_detection+0x130>)
 8001e90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d119      	bne.n	8001ecc <collision_detection+0x4c>
 8001e98:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <collision_detection+0x134>)
 8001e9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d114      	bne.n	8001ecc <collision_detection+0x4c>
	{
		if(tball.batYpos1==0)
 8001ea2:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <collision_detection+0x130>)
 8001ea4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10c      	bne.n	8001ec6 <collision_detection+0x46>
		{
			ball_angle=2;
 8001eac:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <collision_detection+0x134>)
 8001eae:	2202      	movs	r2, #2
 8001eb0:	701a      	strb	r2, [r3, #0]
			Number_Of_Bounces++;
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <collision_detection+0x138>)
 8001eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <collision_detection+0x138>)
 8001ec2:	801a      	strh	r2, [r3, #0]
 8001ec4:	e002      	b.n	8001ecc <collision_detection+0x4c>
		}else
		{
			ball_angle=5;
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <collision_detection+0x134>)
 8001ec8:	2205      	movs	r2, #5
 8001eca:	701a      	strb	r2, [r3, #0]
		}
	}

	//weird bottom left cases
	if((tball.ballXpos-1==0) && (tball.ballYpos+1==8) && (ball_angle==5))
 8001ecc:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <collision_detection+0x130>)
 8001ece:	f993 3000 	ldrsb.w	r3, [r3]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d11e      	bne.n	8001f14 <collision_detection+0x94>
 8001ed6:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <collision_detection+0x130>)
 8001ed8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001edc:	2b07      	cmp	r3, #7
 8001ede:	d119      	bne.n	8001f14 <collision_detection+0x94>
 8001ee0:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <collision_detection+0x134>)
 8001ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d114      	bne.n	8001f14 <collision_detection+0x94>
	{
		if(tball.batYpos1==6)
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <collision_detection+0x130>)
 8001eec:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001ef0:	2b06      	cmp	r3, #6
 8001ef2:	d10c      	bne.n	8001f0e <collision_detection+0x8e>
		{
			ball_angle=4;
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <collision_detection+0x134>)
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	701a      	strb	r2, [r3, #0]
			Number_Of_Bounces++;
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <collision_detection+0x138>)
 8001efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <collision_detection+0x138>)
 8001f0a:	801a      	strh	r2, [r3, #0]
 8001f0c:	e002      	b.n	8001f14 <collision_detection+0x94>
		}else
		{
			ball_angle=3;
 8001f0e:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <collision_detection+0x134>)
 8001f10:	2203      	movs	r2, #3
 8001f12:	701a      	strb	r2, [r3, #0]
		}
	}

	//weird top cases edge of bat at top of matrix
	if((tball.ballXpos-1==tball.batXpos) && (tball.ballYpos-1==-1) && (ball_angle==3))
 8001f14:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <collision_detection+0x130>)
 8001f16:	f993 3000 	ldrsb.w	r3, [r3]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <collision_detection+0x130>)
 8001f1e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d11e      	bne.n	8001f64 <collision_detection+0xe4>
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <collision_detection+0x130>)
 8001f28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d119      	bne.n	8001f64 <collision_detection+0xe4>
 8001f30:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <collision_detection+0x134>)
 8001f32:	f993 3000 	ldrsb.w	r3, [r3]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d114      	bne.n	8001f64 <collision_detection+0xe4>
	{
		if(tball.batYpos1==0)
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <collision_detection+0x130>)
 8001f3c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10c      	bne.n	8001f5e <collision_detection+0xde>
		{
			ball_angle=2;
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <collision_detection+0x134>)
 8001f46:	2202      	movs	r2, #2
 8001f48:	701a      	strb	r2, [r3, #0]
			Number_Of_Bounces++;
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <collision_detection+0x138>)
 8001f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b21a      	sxth	r2, r3
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <collision_detection+0x138>)
 8001f5a:	801a      	strh	r2, [r3, #0]
 8001f5c:	e002      	b.n	8001f64 <collision_detection+0xe4>
		}else
		{
			ball_angle=5;
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <collision_detection+0x134>)
 8001f60:	2205      	movs	r2, #5
 8001f62:	701a      	strb	r2, [r3, #0]
		}
	}

	//weird bottom cases edge of bat at bottom of matrix
	if((tball.ballXpos-1==tball.batXpos) && (tball.ballYpos+1==8) && (ball_angle==5))
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <collision_detection+0x130>)
 8001f66:	f993 3000 	ldrsb.w	r3, [r3]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <collision_detection+0x130>)
 8001f6e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d125      	bne.n	8001fc2 <collision_detection+0x142>
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <collision_detection+0x130>)
 8001f78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f7c:	2b07      	cmp	r3, #7
 8001f7e:	d120      	bne.n	8001fc2 <collision_detection+0x142>
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <collision_detection+0x134>)
 8001f82:	f993 3000 	ldrsb.w	r3, [r3]
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d11b      	bne.n	8001fc2 <collision_detection+0x142>
	{
		if(tball.batYpos1==6)
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <collision_detection+0x130>)
 8001f8c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001f90:	2b06      	cmp	r3, #6
 8001f92:	d113      	bne.n	8001fbc <collision_detection+0x13c>
		{
			ball_angle=4;
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <collision_detection+0x134>)
 8001f96:	2204      	movs	r2, #4
 8001f98:	701a      	strb	r2, [r3, #0]
			Number_Of_Bounces++;
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <collision_detection+0x138>)
 8001f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <collision_detection+0x138>)
 8001faa:	801a      	strh	r2, [r3, #0]
 8001fac:	e009      	b.n	8001fc2 <collision_detection+0x142>
 8001fae:	bf00      	nop
 8001fb0:	200003d0 	.word	0x200003d0
 8001fb4:	20000281 	.word	0x20000281
 8001fb8:	20000282 	.word	0x20000282
		}else
		{
			ball_angle=3;
 8001fbc:	4bb4      	ldr	r3, [pc, #720]	; (8002290 <collision_detection+0x410>)
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(ball_angle==5) //hits bottom of bat while moving left down
 8001fc2:	4bb3      	ldr	r3, [pc, #716]	; (8002290 <collision_detection+0x410>)
 8001fc4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d11d      	bne.n	8002008 <collision_detection+0x188>
	{
		if ((tball.ballXpos==tball.batXpos+1) && (tball.ballYpos==tball.batYpos2))
 8001fcc:	4bb1      	ldr	r3, [pc, #708]	; (8002294 <collision_detection+0x414>)
 8001fce:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4baf      	ldr	r3, [pc, #700]	; (8002294 <collision_detection+0x414>)
 8001fd6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d113      	bne.n	8002008 <collision_detection+0x188>
 8001fe0:	4bac      	ldr	r3, [pc, #688]	; (8002294 <collision_detection+0x414>)
 8001fe2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001fe6:	4bab      	ldr	r3, [pc, #684]	; (8002294 <collision_detection+0x414>)
 8001fe8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d10b      	bne.n	8002008 <collision_detection+0x188>
		{
			ball_angle=2;
 8001ff0:	4ba7      	ldr	r3, [pc, #668]	; (8002290 <collision_detection+0x410>)
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	701a      	strb	r2, [r3, #0]
			Number_Of_Bounces++;
 8001ff6:	4ba8      	ldr	r3, [pc, #672]	; (8002298 <collision_detection+0x418>)
 8001ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	b29b      	uxth	r3, r3
 8002002:	b21a      	sxth	r2, r3
 8002004:	4ba4      	ldr	r3, [pc, #656]	; (8002298 <collision_detection+0x418>)
 8002006:	801a      	strh	r2, [r3, #0]
		}
	}

	if(ball_angle==3) //hits top of bat while moving left up
 8002008:	4ba1      	ldr	r3, [pc, #644]	; (8002290 <collision_detection+0x410>)
 800200a:	f993 3000 	ldrsb.w	r3, [r3]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d11d      	bne.n	800204e <collision_detection+0x1ce>
	{
		if ((tball.ballXpos==tball.batXpos+1) && (tball.ballYpos==tball.batYpos1))
 8002012:	4ba0      	ldr	r3, [pc, #640]	; (8002294 <collision_detection+0x414>)
 8002014:	f993 3000 	ldrsb.w	r3, [r3]
 8002018:	461a      	mov	r2, r3
 800201a:	4b9e      	ldr	r3, [pc, #632]	; (8002294 <collision_detection+0x414>)
 800201c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002020:	3301      	adds	r3, #1
 8002022:	429a      	cmp	r2, r3
 8002024:	d113      	bne.n	800204e <collision_detection+0x1ce>
 8002026:	4b9b      	ldr	r3, [pc, #620]	; (8002294 <collision_detection+0x414>)
 8002028:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800202c:	4b99      	ldr	r3, [pc, #612]	; (8002294 <collision_detection+0x414>)
 800202e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002032:	429a      	cmp	r2, r3
 8002034:	d10b      	bne.n	800204e <collision_detection+0x1ce>
		{
			ball_angle=4;
 8002036:	4b96      	ldr	r3, [pc, #600]	; (8002290 <collision_detection+0x410>)
 8002038:	2204      	movs	r2, #4
 800203a:	701a      	strb	r2, [r3, #0]
			Number_Of_Bounces++;
 800203c:	4b96      	ldr	r3, [pc, #600]	; (8002298 <collision_detection+0x418>)
 800203e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002042:	b29b      	uxth	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	b29b      	uxth	r3, r3
 8002048:	b21a      	sxth	r2, r3
 800204a:	4b93      	ldr	r3, [pc, #588]	; (8002298 <collision_detection+0x418>)
 800204c:	801a      	strh	r2, [r3, #0]
		}
	}


	//start bounce down right
	if(ball_angle==0)
 800204e:	4b90      	ldr	r3, [pc, #576]	; (8002290 <collision_detection+0x410>)
 8002050:	f993 3000 	ldrsb.w	r3, [r3]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d11d      	bne.n	8002094 <collision_detection+0x214>
	{
		if ((tball.ballXpos==tball.batXpos+1) && (tball.ballYpos==tball.batYpos2))
 8002058:	4b8e      	ldr	r3, [pc, #568]	; (8002294 <collision_detection+0x414>)
 800205a:	f993 3000 	ldrsb.w	r3, [r3]
 800205e:	461a      	mov	r2, r3
 8002060:	4b8c      	ldr	r3, [pc, #560]	; (8002294 <collision_detection+0x414>)
 8002062:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002066:	3301      	adds	r3, #1
 8002068:	429a      	cmp	r2, r3
 800206a:	d113      	bne.n	8002094 <collision_detection+0x214>
 800206c:	4b89      	ldr	r3, [pc, #548]	; (8002294 <collision_detection+0x414>)
 800206e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8002072:	4b88      	ldr	r3, [pc, #544]	; (8002294 <collision_detection+0x414>)
 8002074:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002078:	429a      	cmp	r2, r3
 800207a:	d10b      	bne.n	8002094 <collision_detection+0x214>
		{
			ball_angle=2;
 800207c:	4b84      	ldr	r3, [pc, #528]	; (8002290 <collision_detection+0x410>)
 800207e:	2202      	movs	r2, #2
 8002080:	701a      	strb	r2, [r3, #0]
			Number_Of_Bounces++;
 8002082:	4b85      	ldr	r3, [pc, #532]	; (8002298 <collision_detection+0x418>)
 8002084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002088:	b29b      	uxth	r3, r3
 800208a:	3301      	adds	r3, #1
 800208c:	b29b      	uxth	r3, r3
 800208e:	b21a      	sxth	r2, r3
 8002090:	4b81      	ldr	r3, [pc, #516]	; (8002298 <collision_detection+0x418>)
 8002092:	801a      	strh	r2, [r3, #0]
		}
	}

	//start bounce up right
	if(ball_angle==0)
 8002094:	4b7e      	ldr	r3, [pc, #504]	; (8002290 <collision_detection+0x410>)
 8002096:	f993 3000 	ldrsb.w	r3, [r3]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d11d      	bne.n	80020da <collision_detection+0x25a>
	{
		if ((tball.ballXpos==tball.batXpos+1) && (tball.ballYpos==tball.batYpos1))
 800209e:	4b7d      	ldr	r3, [pc, #500]	; (8002294 <collision_detection+0x414>)
 80020a0:	f993 3000 	ldrsb.w	r3, [r3]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b7b      	ldr	r3, [pc, #492]	; (8002294 <collision_detection+0x414>)
 80020a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80020ac:	3301      	adds	r3, #1
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d113      	bne.n	80020da <collision_detection+0x25a>
 80020b2:	4b78      	ldr	r3, [pc, #480]	; (8002294 <collision_detection+0x414>)
 80020b4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80020b8:	4b76      	ldr	r3, [pc, #472]	; (8002294 <collision_detection+0x414>)
 80020ba:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d10b      	bne.n	80020da <collision_detection+0x25a>
		{
			ball_angle=4;
 80020c2:	4b73      	ldr	r3, [pc, #460]	; (8002290 <collision_detection+0x410>)
 80020c4:	2204      	movs	r2, #4
 80020c6:	701a      	strb	r2, [r3, #0]
			Number_Of_Bounces++;
 80020c8:	4b73      	ldr	r3, [pc, #460]	; (8002298 <collision_detection+0x418>)
 80020ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b21a      	sxth	r2, r3
 80020d6:	4b70      	ldr	r3, [pc, #448]	; (8002298 <collision_detection+0x418>)
 80020d8:	801a      	strh	r2, [r3, #0]
		}
	}

	//edge bat case down right
	if(ball_angle==3){
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <collision_detection+0x410>)
 80020dc:	f993 3000 	ldrsb.w	r3, [r3]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d11f      	bne.n	8002124 <collision_detection+0x2a4>
		if ((tball.ballXpos==tball.batXpos+1) && (tball.ballYpos==tball.batYpos2+1))
 80020e4:	4b6b      	ldr	r3, [pc, #428]	; (8002294 <collision_detection+0x414>)
 80020e6:	f993 3000 	ldrsb.w	r3, [r3]
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b69      	ldr	r3, [pc, #420]	; (8002294 <collision_detection+0x414>)
 80020ee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80020f2:	3301      	adds	r3, #1
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d115      	bne.n	8002124 <collision_detection+0x2a4>
 80020f8:	4b66      	ldr	r3, [pc, #408]	; (8002294 <collision_detection+0x414>)
 80020fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80020fe:	461a      	mov	r2, r3
 8002100:	4b64      	ldr	r3, [pc, #400]	; (8002294 <collision_detection+0x414>)
 8002102:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002106:	3301      	adds	r3, #1
 8002108:	429a      	cmp	r2, r3
 800210a:	d10b      	bne.n	8002124 <collision_detection+0x2a4>
		{
			ball_angle=2;
 800210c:	4b60      	ldr	r3, [pc, #384]	; (8002290 <collision_detection+0x410>)
 800210e:	2202      	movs	r2, #2
 8002110:	701a      	strb	r2, [r3, #0]
			Number_Of_Bounces++;
 8002112:	4b61      	ldr	r3, [pc, #388]	; (8002298 <collision_detection+0x418>)
 8002114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002118:	b29b      	uxth	r3, r3
 800211a:	3301      	adds	r3, #1
 800211c:	b29b      	uxth	r3, r3
 800211e:	b21a      	sxth	r2, r3
 8002120:	4b5d      	ldr	r3, [pc, #372]	; (8002298 <collision_detection+0x418>)
 8002122:	801a      	strh	r2, [r3, #0]
		}
	}

	//edge bat case up right
	if(ball_angle==5){
 8002124:	4b5a      	ldr	r3, [pc, #360]	; (8002290 <collision_detection+0x410>)
 8002126:	f993 3000 	ldrsb.w	r3, [r3]
 800212a:	2b05      	cmp	r3, #5
 800212c:	d11f      	bne.n	800216e <collision_detection+0x2ee>
		if ((tball.ballXpos==tball.batXpos+1) && (tball.ballYpos==tball.batYpos1-1))
 800212e:	4b59      	ldr	r3, [pc, #356]	; (8002294 <collision_detection+0x414>)
 8002130:	f993 3000 	ldrsb.w	r3, [r3]
 8002134:	461a      	mov	r2, r3
 8002136:	4b57      	ldr	r3, [pc, #348]	; (8002294 <collision_detection+0x414>)
 8002138:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800213c:	3301      	adds	r3, #1
 800213e:	429a      	cmp	r2, r3
 8002140:	d115      	bne.n	800216e <collision_detection+0x2ee>
 8002142:	4b54      	ldr	r3, [pc, #336]	; (8002294 <collision_detection+0x414>)
 8002144:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002148:	461a      	mov	r2, r3
 800214a:	4b52      	ldr	r3, [pc, #328]	; (8002294 <collision_detection+0x414>)
 800214c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002150:	3b01      	subs	r3, #1
 8002152:	429a      	cmp	r2, r3
 8002154:	d10b      	bne.n	800216e <collision_detection+0x2ee>
		{
			ball_angle=4;
 8002156:	4b4e      	ldr	r3, [pc, #312]	; (8002290 <collision_detection+0x410>)
 8002158:	2204      	movs	r2, #4
 800215a:	701a      	strb	r2, [r3, #0]
			Number_Of_Bounces++;
 800215c:	4b4e      	ldr	r3, [pc, #312]	; (8002298 <collision_detection+0x418>)
 800215e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002162:	b29b      	uxth	r3, r3
 8002164:	3301      	adds	r3, #1
 8002166:	b29b      	uxth	r3, r3
 8002168:	b21a      	sxth	r2, r3
 800216a:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <collision_detection+0x418>)
 800216c:	801a      	strh	r2, [r3, #0]
		}
	}

	if(ball_angle==3)
 800216e:	4b48      	ldr	r3, [pc, #288]	; (8002290 <collision_detection+0x410>)
 8002170:	f993 3000 	ldrsb.w	r3, [r3]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d11d      	bne.n	80021b4 <collision_detection+0x334>
	{
		//up right normal bounce off bat while ball moves up left into bat
		if ((tball.ballXpos==tball.batXpos+1) && (tball.ballYpos==tball.batYpos2))
 8002178:	4b46      	ldr	r3, [pc, #280]	; (8002294 <collision_detection+0x414>)
 800217a:	f993 3000 	ldrsb.w	r3, [r3]
 800217e:	461a      	mov	r2, r3
 8002180:	4b44      	ldr	r3, [pc, #272]	; (8002294 <collision_detection+0x414>)
 8002182:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002186:	3301      	adds	r3, #1
 8002188:	429a      	cmp	r2, r3
 800218a:	d113      	bne.n	80021b4 <collision_detection+0x334>
 800218c:	4b41      	ldr	r3, [pc, #260]	; (8002294 <collision_detection+0x414>)
 800218e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8002192:	4b40      	ldr	r3, [pc, #256]	; (8002294 <collision_detection+0x414>)
 8002194:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002198:	429a      	cmp	r2, r3
 800219a:	d10b      	bne.n	80021b4 <collision_detection+0x334>
		{
			ball_angle=4;
 800219c:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <collision_detection+0x410>)
 800219e:	2204      	movs	r2, #4
 80021a0:	701a      	strb	r2, [r3, #0]
			Number_Of_Bounces++;
 80021a2:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <collision_detection+0x418>)
 80021a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3301      	adds	r3, #1
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b21a      	sxth	r2, r3
 80021b0:	4b39      	ldr	r3, [pc, #228]	; (8002298 <collision_detection+0x418>)
 80021b2:	801a      	strh	r2, [r3, #0]
		}
	}

	if(ball_angle==5)
 80021b4:	4b36      	ldr	r3, [pc, #216]	; (8002290 <collision_detection+0x410>)
 80021b6:	f993 3000 	ldrsb.w	r3, [r3]
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d11d      	bne.n	80021fa <collision_detection+0x37a>
	{
		//down right normal bounce off bat while ball moves down left into bat
		if ((tball.ballXpos==tball.batXpos+1) && (tball.ballYpos==tball.batYpos1))
 80021be:	4b35      	ldr	r3, [pc, #212]	; (8002294 <collision_detection+0x414>)
 80021c0:	f993 3000 	ldrsb.w	r3, [r3]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b33      	ldr	r3, [pc, #204]	; (8002294 <collision_detection+0x414>)
 80021c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80021cc:	3301      	adds	r3, #1
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d113      	bne.n	80021fa <collision_detection+0x37a>
 80021d2:	4b30      	ldr	r3, [pc, #192]	; (8002294 <collision_detection+0x414>)
 80021d4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80021d8:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <collision_detection+0x414>)
 80021da:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d10b      	bne.n	80021fa <collision_detection+0x37a>
		{
			ball_angle=2;
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <collision_detection+0x410>)
 80021e4:	2202      	movs	r2, #2
 80021e6:	701a      	strb	r2, [r3, #0]
			Number_Of_Bounces++;
 80021e8:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <collision_detection+0x418>)
 80021ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	4b28      	ldr	r3, [pc, #160]	; (8002298 <collision_detection+0x418>)
 80021f8:	801a      	strh	r2, [r3, #0]
		}
	}

	if(tball.ballXpos-1<0)//you lose, because ball missed bat
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <collision_detection+0x414>)
 80021fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002200:	3b01      	subs	r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	da04      	bge.n	8002210 <collision_detection+0x390>
	{
		middle_pressed=1;
 8002206:	4b25      	ldr	r3, [pc, #148]	; (800229c <collision_detection+0x41c>)
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
		tennis_gameStop();
 800220c:	f000 f8c4 	bl	8002398 <tennis_gameStop>
	}

	if(tball.ballYpos-1<0) //hits top wall
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <collision_detection+0x414>)
 8002212:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002216:	3b01      	subs	r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	da0f      	bge.n	800223c <collision_detection+0x3bc>
	{
		//tball.ballYpos+=1;
		if(ball_angle==4) //up from left
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <collision_detection+0x410>)
 800221e:	f993 3000 	ldrsb.w	r3, [r3]
 8002222:	2b04      	cmp	r3, #4
 8002224:	d102      	bne.n	800222c <collision_detection+0x3ac>
		{
			ball_angle=2;
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <collision_detection+0x410>)
 8002228:	2202      	movs	r2, #2
 800222a:	701a      	strb	r2, [r3, #0]
		}

		if(ball_angle==3) //up from right
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <collision_detection+0x410>)
 800222e:	f993 3000 	ldrsb.w	r3, [r3]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d102      	bne.n	800223c <collision_detection+0x3bc>
		{
			ball_angle=5;
 8002236:	4b16      	ldr	r3, [pc, #88]	; (8002290 <collision_detection+0x410>)
 8002238:	2205      	movs	r2, #5
 800223a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(tball.ballXpos+1>7) //hits right wall
 800223c:	4b15      	ldr	r3, [pc, #84]	; (8002294 <collision_detection+0x414>)
 800223e:	f993 3000 	ldrsb.w	r3, [r3]
 8002242:	3301      	adds	r3, #1
 8002244:	2b07      	cmp	r3, #7
 8002246:	dd0f      	ble.n	8002268 <collision_detection+0x3e8>
	{
		//tball.ballXpos-=1;
		if(ball_angle==4) //up from left
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <collision_detection+0x410>)
 800224a:	f993 3000 	ldrsb.w	r3, [r3]
 800224e:	2b04      	cmp	r3, #4
 8002250:	d102      	bne.n	8002258 <collision_detection+0x3d8>
		{
			ball_angle=3;
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <collision_detection+0x410>)
 8002254:	2203      	movs	r2, #3
 8002256:	701a      	strb	r2, [r3, #0]
		}

		if(ball_angle==2) //down from right
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <collision_detection+0x410>)
 800225a:	f993 3000 	ldrsb.w	r3, [r3]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d102      	bne.n	8002268 <collision_detection+0x3e8>
		{
			ball_angle=5;
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <collision_detection+0x410>)
 8002264:	2205      	movs	r2, #5
 8002266:	701a      	strb	r2, [r3, #0]
		}
	}

	if(tball.ballYpos+1>7) //hits bottom wall
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <collision_detection+0x414>)
 800226a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800226e:	3301      	adds	r3, #1
 8002270:	2b07      	cmp	r3, #7
 8002272:	dd18      	ble.n	80022a6 <collision_detection+0x426>
	{
		//tball.ballYpos-=1;
		if(ball_angle==2) //down from left
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <collision_detection+0x410>)
 8002276:	f993 3000 	ldrsb.w	r3, [r3]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d102      	bne.n	8002284 <collision_detection+0x404>
		{
			ball_angle=4;
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <collision_detection+0x410>)
 8002280:	2204      	movs	r2, #4
 8002282:	701a      	strb	r2, [r3, #0]
		}

		if(ball_angle==5) //down from right
 8002284:	4b02      	ldr	r3, [pc, #8]	; (8002290 <collision_detection+0x410>)
 8002286:	f993 3000 	ldrsb.w	r3, [r3]
 800228a:	2b05      	cmp	r3, #5
 800228c:	d10b      	bne.n	80022a6 <collision_detection+0x426>
 800228e:	e007      	b.n	80022a0 <collision_detection+0x420>
 8002290:	20000281 	.word	0x20000281
 8002294:	200003d0 	.word	0x200003d0
 8002298:	20000282 	.word	0x20000282
 800229c:	200003ac 	.word	0x200003ac
		{
			ball_angle=3;
 80022a0:	4b02      	ldr	r3, [pc, #8]	; (80022ac <collision_detection+0x42c>)
 80022a2:	2203      	movs	r2, #3
 80022a4:	701a      	strb	r2, [r3, #0]
		}
	}


}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000281 	.word	0x20000281

080022b0 <move_ball>:



void move_ball()
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
	if(ball_angle==0)
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <move_ball+0xe0>)
 80022b6:	f993 3000 	ldrsb.w	r3, [r3]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d108      	bne.n	80022d0 <move_ball+0x20>
	{
		tball.ballXpos=tball.ballXpos-1;
 80022be:	4b35      	ldr	r3, [pc, #212]	; (8002394 <move_ball+0xe4>)
 80022c0:	f993 3000 	ldrsb.w	r3, [r3]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	b25a      	sxtb	r2, r3
 80022cc:	4b31      	ldr	r3, [pc, #196]	; (8002394 <move_ball+0xe4>)
 80022ce:	701a      	strb	r2, [r3, #0]
	}


	if(ball_angle==2)
 80022d0:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <move_ball+0xe0>)
 80022d2:	f993 3000 	ldrsb.w	r3, [r3]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d111      	bne.n	80022fe <move_ball+0x4e>
	{
		tball.ballYpos=tball.ballYpos+1;
 80022da:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <move_ball+0xe4>)
 80022dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	b25a      	sxtb	r2, r3
 80022e8:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <move_ball+0xe4>)
 80022ea:	705a      	strb	r2, [r3, #1]
		tball.ballXpos=tball.ballXpos+1;
 80022ec:	4b29      	ldr	r3, [pc, #164]	; (8002394 <move_ball+0xe4>)
 80022ee:	f993 3000 	ldrsb.w	r3, [r3]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	b25a      	sxtb	r2, r3
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <move_ball+0xe4>)
 80022fc:	701a      	strb	r2, [r3, #0]

	}


	if(ball_angle==3)
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <move_ball+0xe0>)
 8002300:	f993 3000 	ldrsb.w	r3, [r3]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d111      	bne.n	800232c <move_ball+0x7c>
	{
		tball.ballXpos=tball.ballXpos-1;
 8002308:	4b22      	ldr	r3, [pc, #136]	; (8002394 <move_ball+0xe4>)
 800230a:	f993 3000 	ldrsb.w	r3, [r3]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	b25a      	sxtb	r2, r3
 8002316:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <move_ball+0xe4>)
 8002318:	701a      	strb	r2, [r3, #0]
		tball.ballYpos=tball.ballYpos-1;
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <move_ball+0xe4>)
 800231c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	b25a      	sxtb	r2, r3
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <move_ball+0xe4>)
 800232a:	705a      	strb	r2, [r3, #1]

	}


	if(ball_angle==4)
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <move_ball+0xe0>)
 800232e:	f993 3000 	ldrsb.w	r3, [r3]
 8002332:	2b04      	cmp	r3, #4
 8002334:	d111      	bne.n	800235a <move_ball+0xaa>
	{
		tball.ballXpos=tball.ballXpos+1;
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <move_ball+0xe4>)
 8002338:	f993 3000 	ldrsb.w	r3, [r3]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	3301      	adds	r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	b25a      	sxtb	r2, r3
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <move_ball+0xe4>)
 8002346:	701a      	strb	r2, [r3, #0]
		tball.ballYpos=tball.ballYpos-1;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <move_ball+0xe4>)
 800234a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	b25a      	sxtb	r2, r3
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <move_ball+0xe4>)
 8002358:	705a      	strb	r2, [r3, #1]

	}

	if(ball_angle==5)
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <move_ball+0xe0>)
 800235c:	f993 3000 	ldrsb.w	r3, [r3]
 8002360:	2b05      	cmp	r3, #5
 8002362:	d111      	bne.n	8002388 <move_ball+0xd8>
	{

		tball.ballXpos=tball.ballXpos-1;
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <move_ball+0xe4>)
 8002366:	f993 3000 	ldrsb.w	r3, [r3]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	b25a      	sxtb	r2, r3
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <move_ball+0xe4>)
 8002374:	701a      	strb	r2, [r3, #0]
		tball.ballYpos=tball.ballYpos+1;
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <move_ball+0xe4>)
 8002378:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	3301      	adds	r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	b25a      	sxtb	r2, r3
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <move_ball+0xe4>)
 8002386:	705a      	strb	r2, [r3, #1]
	}
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	20000281 	.word	0x20000281
 8002394:	200003d0 	.word	0x200003d0

08002398 <tennis_gameStop>:



void tennis_gameStop(){
 8002398:	b490      	push	{r4, r7}
 800239a:	af00      	add	r7, sp, #0
	tennis_game_counter=0;
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <tennis_gameStop+0x30>)
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	f04f 0400 	mov.w	r4, #0
 80023a6:	e9c2 3400 	strd	r3, r4, [r2]
	TennisSysTickCounter=0;
 80023aa:	4a08      	ldr	r2, [pc, #32]	; (80023cc <tennis_gameStop+0x34>)
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	f04f 0400 	mov.w	r4, #0
 80023b4:	e9c2 3400 	strd	r3, r4, [r2]
	ball_angle=0;
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <tennis_gameStop+0x38>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc90      	pop	{r4, r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000278 	.word	0x20000278
 80023cc:	200003c8 	.word	0x200003c8
 80023d0:	20000281 	.word	0x20000281

080023d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023d6:	e003      	b.n	80023e0 <LoopCopyDataInit>

080023d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023de:	3104      	adds	r1, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023e0:	480a      	ldr	r0, [pc, #40]	; (800240c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023e8:	d3f6      	bcc.n	80023d8 <CopyDataInit>
  ldr r2, =_sbss
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023ec:	e002      	b.n	80023f4 <LoopFillZerobss>

080023ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023f0:	f842 3b04 	str.w	r3, [r2], #4

080023f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80023f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023f8:	d3f9      	bcc.n	80023ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023fa:	f7ff fa8b 	bl	8001914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fe:	f002 f865 	bl	80044cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002402:	f7fd ff11 	bl	8000228 <main>
  bx lr
 8002406:	4770      	bx	lr
  ldr r3, =_sidata
 8002408:	0800457c 	.word	0x0800457c
  ldr r0, =_sdata
 800240c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002410:	20000240 	.word	0x20000240
  ldr r2, =_sbss
 8002414:	20000240 	.word	0x20000240
  ldr r3, = _ebss
 8002418:	200003e0 	.word	0x200003e0

0800241c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC1_2_IRQHandler>
	...

08002420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_Init+0x28>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_Init+0x28>)
 800242a:	f043 0310 	orr.w	r3, r3, #16
 800242e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002430:	2003      	movs	r0, #3
 8002432:	f000 fb4f 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002436:	2000      	movs	r0, #0
 8002438:	f000 f808 	bl	800244c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800243c:	f7fe ffda 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40022000 	.word	0x40022000

0800244c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x54>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_InitTick+0x58>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002462:	fbb3 f3f1 	udiv	r3, r3, r1
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fb67 	bl	8002b3e <HAL_SYSTICK_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e00e      	b.n	8002498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d80a      	bhi.n	8002496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002480:	2200      	movs	r2, #0
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f000 fb2f 	bl	8002aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800248c:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <HAL_InitTick+0x5c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000224 	.word	0x20000224
 80024a4:	2000023c 	.word	0x2000023c
 80024a8:	20000238 	.word	0x20000238

080024ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_IncTick+0x1c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_IncTick+0x20>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a03      	ldr	r2, [pc, #12]	; (80024cc <HAL_IncTick+0x20>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	2000023c 	.word	0x2000023c
 80024cc:	200003dc 	.word	0x200003dc

080024d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b02      	ldr	r3, [pc, #8]	; (80024e0 <HAL_GetTick+0x10>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	200003dc 	.word	0x200003dc

080024e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_GetTick>
 80024f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d005      	beq.n	800250a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_Delay+0x40>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800250a:	bf00      	nop
 800250c:	f7ff ffe0 	bl	80024d0 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d8f7      	bhi.n	800250c <HAL_Delay+0x28>
  {
  }
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000023c 	.word	0x2000023c

08002528 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0be      	b.n	80026c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe ff76 	bl	8001458 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f9ab 	bl	80028c8 <ADC_ConversionStop_Disable>
 8002572:	4603      	mov	r3, r0
 8002574:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 8099 	bne.w	80026b6 <HAL_ADC_Init+0x18e>
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 8095 	bne.w	80026b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002594:	f023 0302 	bic.w	r3, r3, #2
 8002598:	f043 0202 	orr.w	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7b1b      	ldrb	r3, [r3, #12]
 80025ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c0:	d003      	beq.n	80025ca <HAL_ADC_Init+0xa2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d102      	bne.n	80025d0 <HAL_ADC_Init+0xa8>
 80025ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ce:	e000      	b.n	80025d2 <HAL_ADC_Init+0xaa>
 80025d0:	2300      	movs	r3, #0
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7d1b      	ldrb	r3, [r3, #20]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d119      	bne.n	8002614 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7b1b      	ldrb	r3, [r3, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	035a      	lsls	r2, r3, #13
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	e00b      	b.n	8002614 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	f043 0201 	orr.w	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	430a      	orrs	r2, r1
 8002626:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_ADC_Init+0x1a8>)
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	430b      	orrs	r3, r1
 800263a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002644:	d003      	beq.n	800264e <HAL_ADC_Init+0x126>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d104      	bne.n	8002658 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	3b01      	subs	r3, #1
 8002654:	051b      	lsls	r3, r3, #20
 8002656:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	430a      	orrs	r2, r1
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_ADC_Init+0x1ac>)
 8002674:	4013      	ands	r3, r2
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	429a      	cmp	r2, r3
 800267a:	d10b      	bne.n	8002694 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002692:	e018      	b.n	80026c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	f023 0312 	bic.w	r3, r3, #18
 800269c:	f043 0210 	orr.w	r2, r3, #16
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026b4:	e007      	b.n	80026c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	ffe1f7fd 	.word	0xffe1f7fd
 80026d4:	ff1f0efe 	.word	0xff1f0efe

080026d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x20>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e0dc      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x1da>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b06      	cmp	r3, #6
 8002706:	d81c      	bhi.n	8002742 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	3b05      	subs	r3, #5
 800271a:	221f      	movs	r2, #31
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	4019      	ands	r1, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	3b05      	subs	r3, #5
 8002734:	fa00 f203 	lsl.w	r2, r0, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	635a      	str	r2, [r3, #52]	; 0x34
 8002740:	e03c      	b.n	80027bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d81c      	bhi.n	8002784 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	3b23      	subs	r3, #35	; 0x23
 800275c:	221f      	movs	r2, #31
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	4019      	ands	r1, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	3b23      	subs	r3, #35	; 0x23
 8002776:	fa00 f203 	lsl.w	r2, r0, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
 8002782:	e01b      	b.n	80027bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	3b41      	subs	r3, #65	; 0x41
 8002796:	221f      	movs	r2, #31
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	4019      	ands	r1, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b41      	subs	r3, #65	; 0x41
 80027b0:	fa00 f203 	lsl.w	r2, r0, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b09      	cmp	r3, #9
 80027c2:	d91c      	bls.n	80027fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68d9      	ldr	r1, [r3, #12]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	3b1e      	subs	r3, #30
 80027d6:	2207      	movs	r2, #7
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	4019      	ands	r1, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6898      	ldr	r0, [r3, #8]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	3b1e      	subs	r3, #30
 80027f0:	fa00 f203 	lsl.w	r2, r0, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	e019      	b.n	8002832 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6919      	ldr	r1, [r3, #16]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4613      	mov	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	2207      	movs	r2, #7
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	4019      	ands	r1, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6898      	ldr	r0, [r3, #8]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	fa00 f203 	lsl.w	r2, r0, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b10      	cmp	r3, #16
 8002838:	d003      	beq.n	8002842 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800283e:	2b11      	cmp	r3, #17
 8002840:	d132      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <HAL_ADC_ConfigChannel+0x1e4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d125      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d126      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002868:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b10      	cmp	r3, #16
 8002870:	d11a      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	0c9a      	lsrs	r2, r3, #18
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002888:	e002      	b.n	8002890 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3b01      	subs	r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f9      	bne.n	800288a <HAL_ADC_ConfigChannel+0x1b2>
 8002896:	e007      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40012400 	.word	0x40012400
 80028c0:	20000224 	.word	0x20000224
 80028c4:	431bde83 	.word	0x431bde83

080028c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d127      	bne.n	8002932 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028f2:	f7ff fded 	bl	80024d0 <HAL_GetTick>
 80028f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028f8:	e014      	b.n	8002924 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028fa:	f7ff fde9 	bl	80024d0 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d90d      	bls.n	8002924 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	f043 0210 	orr.w	r2, r3, #16
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	f043 0201 	orr.w	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e007      	b.n	8002934 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b01      	cmp	r3, #1
 8002930:	d0e3      	beq.n	80028fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296e:	4a04      	ldr	r2, [pc, #16]	; (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60d3      	str	r3, [r2, #12]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <__NVIC_GetPriorityGrouping+0x18>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 0307 	and.w	r3, r3, #7
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db0b      	blt.n	80029ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4906      	ldr	r1, [pc, #24]	; (80029d4 <__NVIC_EnableIRQ+0x34>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2001      	movs	r0, #1
 80029c2:	fa00 f202 	lsl.w	r2, r0, r2
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	e000e100 	.word	0xe000e100

080029d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	6039      	str	r1, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	db0a      	blt.n	8002a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	490c      	ldr	r1, [pc, #48]	; (8002a24 <__NVIC_SetPriority+0x4c>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	440b      	add	r3, r1
 80029fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a00:	e00a      	b.n	8002a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4908      	ldr	r1, [pc, #32]	; (8002a28 <__NVIC_SetPriority+0x50>)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	440b      	add	r3, r1
 8002a16:	761a      	strb	r2, [r3, #24]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000e100 	.word	0xe000e100
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f1c3 0307 	rsb	r3, r3, #7
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	bf28      	it	cs
 8002a4a:	2304      	movcs	r3, #4
 8002a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d902      	bls.n	8002a5c <NVIC_EncodePriority+0x30>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3b03      	subs	r3, #3
 8002a5a:	e000      	b.n	8002a5e <NVIC_EncodePriority+0x32>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	401a      	ands	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43d9      	mvns	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	4313      	orrs	r3, r2
         );
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3724      	adds	r7, #36	; 0x24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa0:	d301      	bcc.n	8002aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00f      	b.n	8002ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <SysTick_Config+0x40>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aae:	210f      	movs	r1, #15
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	f7ff ff90 	bl	80029d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <SysTick_Config+0x40>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002abe:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <SysTick_Config+0x40>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010

08002ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff2d 	bl	800293c <__NVIC_SetPriorityGrouping>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002afc:	f7ff ff42 	bl	8002984 <__NVIC_GetPriorityGrouping>
 8002b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f7ff ff90 	bl	8002a2c <NVIC_EncodePriority>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff5f 	bl	80029d8 <__NVIC_SetPriority>
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff35 	bl	80029a0 <__NVIC_EnableIRQ>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ffa2 	bl	8002a90 <SysTick_Config>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6a:	e127      	b.n	8002dbc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 8116 	bne.w	8002db6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b12      	cmp	r3, #18
 8002b90:	d034      	beq.n	8002bfc <HAL_GPIO_Init+0xa4>
 8002b92:	2b12      	cmp	r3, #18
 8002b94:	d80d      	bhi.n	8002bb2 <HAL_GPIO_Init+0x5a>
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d02b      	beq.n	8002bf2 <HAL_GPIO_Init+0x9a>
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d804      	bhi.n	8002ba8 <HAL_GPIO_Init+0x50>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d031      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d01c      	beq.n	8002be0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ba6:	e048      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d043      	beq.n	8002c34 <HAL_GPIO_Init+0xdc>
 8002bac:	2b11      	cmp	r3, #17
 8002bae:	d01b      	beq.n	8002be8 <HAL_GPIO_Init+0x90>
          break;
 8002bb0:	e043      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002bb2:	4a89      	ldr	r2, [pc, #548]	; (8002dd8 <HAL_GPIO_Init+0x280>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d026      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bb8:	4a87      	ldr	r2, [pc, #540]	; (8002dd8 <HAL_GPIO_Init+0x280>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d806      	bhi.n	8002bcc <HAL_GPIO_Init+0x74>
 8002bbe:	4a87      	ldr	r2, [pc, #540]	; (8002ddc <HAL_GPIO_Init+0x284>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d020      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bc4:	4a86      	ldr	r2, [pc, #536]	; (8002de0 <HAL_GPIO_Init+0x288>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01d      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
          break;
 8002bca:	e036      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002bcc:	4a85      	ldr	r2, [pc, #532]	; (8002de4 <HAL_GPIO_Init+0x28c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bd2:	4a85      	ldr	r2, [pc, #532]	; (8002de8 <HAL_GPIO_Init+0x290>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d016      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
 8002bd8:	4a84      	ldr	r2, [pc, #528]	; (8002dec <HAL_GPIO_Init+0x294>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0xae>
          break;
 8002bde:	e02c      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	623b      	str	r3, [r7, #32]
          break;
 8002be6:	e028      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	3304      	adds	r3, #4
 8002bee:	623b      	str	r3, [r7, #32]
          break;
 8002bf0:	e023      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	623b      	str	r3, [r7, #32]
          break;
 8002bfa:	e01e      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	330c      	adds	r3, #12
 8002c02:	623b      	str	r3, [r7, #32]
          break;
 8002c04:	e019      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e012      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	611a      	str	r2, [r3, #16]
          break;
 8002c26:	e008      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c28:	2308      	movs	r3, #8
 8002c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	615a      	str	r2, [r3, #20]
          break;
 8002c32:	e002      	b.n	8002c3a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
          break;
 8002c38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2bff      	cmp	r3, #255	; 0xff
 8002c3e:	d801      	bhi.n	8002c44 <HAL_GPIO_Init+0xec>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	e001      	b.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2bff      	cmp	r3, #255	; 0xff
 8002c4e:	d802      	bhi.n	8002c56 <HAL_GPIO_Init+0xfe>
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	e002      	b.n	8002c5c <HAL_GPIO_Init+0x104>
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	3b08      	subs	r3, #8
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	210f      	movs	r1, #15
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	6a39      	ldr	r1, [r7, #32]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	431a      	orrs	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8096 	beq.w	8002db6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c8a:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	4a58      	ldr	r2, [pc, #352]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6193      	str	r3, [r2, #24]
 8002c96:	4b56      	ldr	r3, [pc, #344]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ca2:	4a54      	ldr	r2, [pc, #336]	; (8002df4 <HAL_GPIO_Init+0x29c>)
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4b      	ldr	r2, [pc, #300]	; (8002df8 <HAL_GPIO_Init+0x2a0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x19e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_GPIO_Init+0x2a4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x19a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a49      	ldr	r2, [pc, #292]	; (8002e00 <HAL_GPIO_Init+0x2a8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x196>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a48      	ldr	r2, [pc, #288]	; (8002e04 <HAL_GPIO_Init+0x2ac>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x192>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cea:	2304      	movs	r3, #4
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x1a0>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d08:	493a      	ldr	r1, [pc, #232]	; (8002df4 <HAL_GPIO_Init+0x29c>)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4938      	ldr	r1, [pc, #224]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
 8002d2e:	e006      	b.n	8002d3e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d30:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	4933      	ldr	r1, [pc, #204]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	492e      	ldr	r1, [pc, #184]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	4929      	ldr	r1, [pc, #164]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d72:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	4924      	ldr	r1, [pc, #144]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
 8002d7e:	e006      	b.n	8002d8e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	491f      	ldr	r1, [pc, #124]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	491a      	ldr	r1, [pc, #104]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60cb      	str	r3, [r1, #12]
 8002da6:	e006      	b.n	8002db6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	4915      	ldr	r1, [pc, #84]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	3301      	adds	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f47f aed0 	bne.w	8002b6c <HAL_GPIO_Init+0x14>
  }
}
 8002dcc:	bf00      	nop
 8002dce:	372c      	adds	r7, #44	; 0x2c
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	10210000 	.word	0x10210000
 8002ddc:	10110000 	.word	0x10110000
 8002de0:	10120000 	.word	0x10120000
 8002de4:	10310000 	.word	0x10310000
 8002de8:	10320000 	.word	0x10320000
 8002dec:	10220000 	.word	0x10220000
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40010800 	.word	0x40010800
 8002dfc:	40010c00 	.word	0x40010c00
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40011400 	.word	0x40011400
 8002e08:	40010400 	.word	0x40010400

08002e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
 8002e28:	e001      	b.n	8002e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	807b      	strh	r3, [r7, #2]
 8002e46:	4613      	mov	r3, r2
 8002e48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e4a:	787b      	ldrb	r3, [r7, #1]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e50:	887a      	ldrh	r2, [r7, #2]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e56:	e003      	b.n	8002e60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	041a      	lsls	r2, r3, #16
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	611a      	str	r2, [r3, #16]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e82:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f806 	bl	8002e9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40010400 	.word	0x40010400

08002e9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e11f      	b.n	8003102 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fafa 	bl	80014d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f14:	f000 ffd4 	bl	8003ec0 <HAL_RCC_GetPCLK1Freq>
 8002f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4a7b      	ldr	r2, [pc, #492]	; (800310c <HAL_I2C_Init+0x25c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d807      	bhi.n	8002f34 <HAL_I2C_Init+0x84>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a7a      	ldr	r2, [pc, #488]	; (8003110 <HAL_I2C_Init+0x260>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	bf94      	ite	ls
 8002f2c:	2301      	movls	r3, #1
 8002f2e:	2300      	movhi	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e006      	b.n	8002f42 <HAL_I2C_Init+0x92>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a77      	ldr	r2, [pc, #476]	; (8003114 <HAL_I2C_Init+0x264>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	bf94      	ite	ls
 8002f3c:	2301      	movls	r3, #1
 8002f3e:	2300      	movhi	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0db      	b.n	8003102 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4a72      	ldr	r2, [pc, #456]	; (8003118 <HAL_I2C_Init+0x268>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	0c9b      	lsrs	r3, r3, #18
 8002f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4a64      	ldr	r2, [pc, #400]	; (800310c <HAL_I2C_Init+0x25c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d802      	bhi.n	8002f84 <HAL_I2C_Init+0xd4>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	3301      	adds	r3, #1
 8002f82:	e009      	b.n	8002f98 <HAL_I2C_Init+0xe8>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	4a63      	ldr	r2, [pc, #396]	; (800311c <HAL_I2C_Init+0x26c>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	099b      	lsrs	r3, r3, #6
 8002f96:	3301      	adds	r3, #1
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002faa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4956      	ldr	r1, [pc, #344]	; (800310c <HAL_I2C_Init+0x25c>)
 8002fb4:	428b      	cmp	r3, r1
 8002fb6:	d80d      	bhi.n	8002fd4 <HAL_I2C_Init+0x124>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e59      	subs	r1, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	bf38      	it	cc
 8002fd0:	2304      	movcc	r3, #4
 8002fd2:	e04f      	b.n	8003074 <HAL_I2C_Init+0x1c4>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d111      	bne.n	8003000 <HAL_I2C_Init+0x150>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1e58      	subs	r0, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	440b      	add	r3, r1
 8002fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e012      	b.n	8003026 <HAL_I2C_Init+0x176>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	0099      	lsls	r1, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Init+0x17e>
 800302a:	2301      	movs	r3, #1
 800302c:	e022      	b.n	8003074 <HAL_I2C_Init+0x1c4>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10e      	bne.n	8003054 <HAL_I2C_Init+0x1a4>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1e58      	subs	r0, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	440b      	add	r3, r1
 8003044:	fbb0 f3f3 	udiv	r3, r0, r3
 8003048:	3301      	adds	r3, #1
 800304a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003052:	e00f      	b.n	8003074 <HAL_I2C_Init+0x1c4>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e58      	subs	r0, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	0099      	lsls	r1, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	6809      	ldr	r1, [r1, #0]
 8003078:	4313      	orrs	r3, r2
 800307a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6911      	ldr	r1, [r2, #16]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68d2      	ldr	r2, [r2, #12]
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	000186a0 	.word	0x000186a0
 8003110:	001e847f 	.word	0x001e847f
 8003114:	003d08ff 	.word	0x003d08ff
 8003118:	431bde83 	.word	0x431bde83
 800311c:	10624dd3 	.word	0x10624dd3

08003120 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	461a      	mov	r2, r3
 800312c:	460b      	mov	r3, r1
 800312e:	817b      	strh	r3, [r7, #10]
 8003130:	4613      	mov	r3, r2
 8003132:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003134:	f7ff f9cc 	bl	80024d0 <HAL_GetTick>
 8003138:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b20      	cmp	r3, #32
 8003144:	f040 80e0 	bne.w	8003308 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2319      	movs	r3, #25
 800314e:	2201      	movs	r2, #1
 8003150:	4970      	ldr	r1, [pc, #448]	; (8003314 <HAL_I2C_Master_Transmit+0x1f4>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f958 	bl	8003408 <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
 8003160:	e0d3      	b.n	800330a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_I2C_Master_Transmit+0x50>
 800316c:	2302      	movs	r3, #2
 800316e:	e0cc      	b.n	800330a <HAL_I2C_Master_Transmit+0x1ea>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b01      	cmp	r3, #1
 8003184:	d007      	beq.n	8003196 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2221      	movs	r2, #33	; 0x21
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2210      	movs	r2, #16
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	893a      	ldrh	r2, [r7, #8]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a50      	ldr	r2, [pc, #320]	; (8003318 <HAL_I2C_Master_Transmit+0x1f8>)
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031d8:	8979      	ldrh	r1, [r7, #10]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	6a3a      	ldr	r2, [r7, #32]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f89c 	bl	800331c <I2C_MasterRequestWrite>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e08d      	b.n	800330a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003204:	e066      	b.n	80032d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	6a39      	ldr	r1, [r7, #32]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f9d2 	bl	80035b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00d      	beq.n	8003232 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	2b04      	cmp	r3, #4
 800321c:	d107      	bne.n	800322e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e06b      	b.n	800330a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	781a      	ldrb	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b04      	cmp	r3, #4
 800326e:	d11b      	bne.n	80032a8 <HAL_I2C_Master_Transmit+0x188>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	2b00      	cmp	r3, #0
 8003276:	d017      	beq.n	80032a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	6a39      	ldr	r1, [r7, #32]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f9c2 	bl	8003636 <I2C_WaitOnBTFFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d107      	bne.n	80032d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e01a      	b.n	800330a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d194      	bne.n	8003206 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
  }
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	00100002 	.word	0x00100002
 8003318:	ffff0000 	.word	0xffff0000

0800331c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	460b      	mov	r3, r1
 800332a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d006      	beq.n	8003346 <I2C_MasterRequestWrite+0x2a>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d003      	beq.n	8003346 <I2C_MasterRequestWrite+0x2a>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003344:	d108      	bne.n	8003358 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e00b      	b.n	8003370 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	2b12      	cmp	r3, #18
 800335e:	d107      	bne.n	8003370 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800336e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f843 	bl	8003408 <I2C_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e035      	b.n	80033f8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003394:	d108      	bne.n	80033a8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033a4:	611a      	str	r2, [r3, #16]
 80033a6:	e01b      	b.n	80033e0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033a8:	897b      	ldrh	r3, [r7, #10]
 80033aa:	11db      	asrs	r3, r3, #7
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f003 0306 	and.w	r3, r3, #6
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f063 030f 	orn	r3, r3, #15
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	490e      	ldr	r1, [pc, #56]	; (8003400 <I2C_MasterRequestWrite+0xe4>)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f875 	bl	80034b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e010      	b.n	80033f8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4907      	ldr	r1, [pc, #28]	; (8003404 <I2C_MasterRequestWrite+0xe8>)
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f865 	bl	80034b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	00010008 	.word	0x00010008
 8003404:	00010002 	.word	0x00010002

08003408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	4613      	mov	r3, r2
 8003416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003418:	e025      	b.n	8003466 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d021      	beq.n	8003466 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003422:	f7ff f855 	bl	80024d0 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d302      	bcc.n	8003438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d116      	bne.n	8003466 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f043 0220 	orr.w	r2, r3, #32
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e023      	b.n	80034ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	d10d      	bne.n	800348c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4013      	ands	r3, r2
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	bf0c      	ite	eq
 8003482:	2301      	moveq	r3, #1
 8003484:	2300      	movne	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	e00c      	b.n	80034a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4013      	ands	r3, r2
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d0b6      	beq.n	800341a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c4:	e051      	b.n	800356a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d4:	d123      	bne.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f043 0204 	orr.w	r2, r3, #4
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e046      	b.n	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d021      	beq.n	800356a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe ffd3 	bl	80024d0 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d116      	bne.n	800356a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e020      	b.n	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10c      	bne.n	800358e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	bf14      	ite	ne
 8003586:	2301      	movne	r3, #1
 8003588:	2300      	moveq	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	e00b      	b.n	80035a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	43da      	mvns	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4013      	ands	r3, r2
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d18d      	bne.n	80034c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c0:	e02d      	b.n	800361e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f878 	bl	80036b8 <I2C_IsAcknowledgeFailed>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e02d      	b.n	800362e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d021      	beq.n	800361e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035da:	f7fe ff79 	bl	80024d0 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d302      	bcc.n	80035f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d116      	bne.n	800361e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f043 0220 	orr.w	r2, r3, #32
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e007      	b.n	800362e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003628:	2b80      	cmp	r3, #128	; 0x80
 800362a:	d1ca      	bne.n	80035c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003642:	e02d      	b.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f837 	bl	80036b8 <I2C_IsAcknowledgeFailed>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e02d      	b.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d021      	beq.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365c:	f7fe ff38 	bl	80024d0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	429a      	cmp	r2, r3
 800366a:	d302      	bcc.n	8003672 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d116      	bne.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e007      	b.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d1ca      	bne.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ce:	d11b      	bne.n	8003708 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0204 	orr.w	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e26c      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8087 	beq.w	8003842 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003734:	4b92      	ldr	r3, [pc, #584]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b04      	cmp	r3, #4
 800373e:	d00c      	beq.n	800375a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003740:	4b8f      	ldr	r3, [pc, #572]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b08      	cmp	r3, #8
 800374a:	d112      	bne.n	8003772 <HAL_RCC_OscConfig+0x5e>
 800374c:	4b8c      	ldr	r3, [pc, #560]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003758:	d10b      	bne.n	8003772 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375a:	4b89      	ldr	r3, [pc, #548]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d06c      	beq.n	8003840 <HAL_RCC_OscConfig+0x12c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d168      	bne.n	8003840 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e246      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377a:	d106      	bne.n	800378a <HAL_RCC_OscConfig+0x76>
 800377c:	4b80      	ldr	r3, [pc, #512]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a7f      	ldr	r2, [pc, #508]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 8003782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	e02e      	b.n	80037e8 <HAL_RCC_OscConfig+0xd4>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0x98>
 8003792:	4b7b      	ldr	r3, [pc, #492]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a7a      	ldr	r2, [pc, #488]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 8003798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b78      	ldr	r3, [pc, #480]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a77      	ldr	r2, [pc, #476]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e01d      	b.n	80037e8 <HAL_RCC_OscConfig+0xd4>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCC_OscConfig+0xbc>
 80037b6:	4b72      	ldr	r3, [pc, #456]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a71      	ldr	r2, [pc, #452]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b6f      	ldr	r3, [pc, #444]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a6e      	ldr	r2, [pc, #440]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e00b      	b.n	80037e8 <HAL_RCC_OscConfig+0xd4>
 80037d0:	4b6b      	ldr	r3, [pc, #428]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a6a      	ldr	r2, [pc, #424]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4b68      	ldr	r3, [pc, #416]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a67      	ldr	r2, [pc, #412]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fe fe6e 	bl	80024d0 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f8:	f7fe fe6a 	bl	80024d0 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e1fa      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	4b5d      	ldr	r3, [pc, #372]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0xe4>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe fe5a 	bl	80024d0 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003820:	f7fe fe56 	bl	80024d0 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e1e6      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	4b53      	ldr	r3, [pc, #332]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x10c>
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d063      	beq.n	8003916 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800384e:	4b4c      	ldr	r3, [pc, #304]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800385a:	4b49      	ldr	r3, [pc, #292]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	2b08      	cmp	r3, #8
 8003864:	d11c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x18c>
 8003866:	4b46      	ldr	r3, [pc, #280]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d116      	bne.n	80038a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	4b43      	ldr	r3, [pc, #268]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_RCC_OscConfig+0x176>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e1ba      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388a:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4939      	ldr	r1, [pc, #228]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	e03a      	b.n	8003916 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a8:	4b36      	ldr	r3, [pc, #216]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fe fe0f 	bl	80024d0 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b6:	f7fe fe0b 	bl	80024d0 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e19b      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4927      	ldr	r1, [pc, #156]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
 80038e8:	e015      	b.n	8003916 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ea:	4b26      	ldr	r3, [pc, #152]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe fdee 	bl	80024d0 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f8:	f7fe fdea 	bl	80024d0 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e17a      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390a:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d03a      	beq.n	8003998 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d019      	beq.n	800395e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392a:	4b17      	ldr	r3, [pc, #92]	; (8003988 <HAL_RCC_OscConfig+0x274>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003930:	f7fe fdce 	bl	80024d0 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003938:	f7fe fdca 	bl	80024d0 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e15a      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_RCC_OscConfig+0x26c>)
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003956:	2001      	movs	r0, #1
 8003958:	f000 fada 	bl	8003f10 <RCC_Delay>
 800395c:	e01c      	b.n	8003998 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <HAL_RCC_OscConfig+0x274>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003964:	f7fe fdb4 	bl	80024d0 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396a:	e00f      	b.n	800398c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800396c:	f7fe fdb0 	bl	80024d0 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d908      	bls.n	800398c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e140      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	42420000 	.word	0x42420000
 8003988:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398c:	4b9e      	ldr	r3, [pc, #632]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e9      	bne.n	800396c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a6 	beq.w	8003af2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a6:	2300      	movs	r3, #0
 80039a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039aa:	4b97      	ldr	r3, [pc, #604]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10d      	bne.n	80039d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b6:	4b94      	ldr	r3, [pc, #592]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	4a93      	ldr	r2, [pc, #588]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c0:	61d3      	str	r3, [r2, #28]
 80039c2:	4b91      	ldr	r3, [pc, #580]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ce:	2301      	movs	r3, #1
 80039d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d2:	4b8e      	ldr	r3, [pc, #568]	; (8003c0c <HAL_RCC_OscConfig+0x4f8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d118      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039de:	4b8b      	ldr	r3, [pc, #556]	; (8003c0c <HAL_RCC_OscConfig+0x4f8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a8a      	ldr	r2, [pc, #552]	; (8003c0c <HAL_RCC_OscConfig+0x4f8>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ea:	f7fe fd71 	bl	80024d0 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fe fd6d 	bl	80024d0 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b64      	cmp	r3, #100	; 0x64
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e0fd      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	4b81      	ldr	r3, [pc, #516]	; (8003c0c <HAL_RCC_OscConfig+0x4f8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x312>
 8003a18:	4b7b      	ldr	r3, [pc, #492]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	4a7a      	ldr	r2, [pc, #488]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6213      	str	r3, [r2, #32]
 8003a24:	e02d      	b.n	8003a82 <HAL_RCC_OscConfig+0x36e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x334>
 8003a2e:	4b76      	ldr	r3, [pc, #472]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4a75      	ldr	r2, [pc, #468]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	6213      	str	r3, [r2, #32]
 8003a3a:	4b73      	ldr	r3, [pc, #460]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	4a72      	ldr	r2, [pc, #456]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a40:	f023 0304 	bic.w	r3, r3, #4
 8003a44:	6213      	str	r3, [r2, #32]
 8003a46:	e01c      	b.n	8003a82 <HAL_RCC_OscConfig+0x36e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	d10c      	bne.n	8003a6a <HAL_RCC_OscConfig+0x356>
 8003a50:	4b6d      	ldr	r3, [pc, #436]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	4a6c      	ldr	r2, [pc, #432]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a56:	f043 0304 	orr.w	r3, r3, #4
 8003a5a:	6213      	str	r3, [r2, #32]
 8003a5c:	4b6a      	ldr	r3, [pc, #424]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	4a69      	ldr	r2, [pc, #420]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	6213      	str	r3, [r2, #32]
 8003a68:	e00b      	b.n	8003a82 <HAL_RCC_OscConfig+0x36e>
 8003a6a:	4b67      	ldr	r3, [pc, #412]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4a66      	ldr	r2, [pc, #408]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	6213      	str	r3, [r2, #32]
 8003a76:	4b64      	ldr	r3, [pc, #400]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4a63      	ldr	r2, [pc, #396]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003a7c:	f023 0304 	bic.w	r3, r3, #4
 8003a80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d015      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8a:	f7fe fd21 	bl	80024d0 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fe fd1d 	bl	80024d0 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e0ab      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa8:	4b57      	ldr	r3, [pc, #348]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ee      	beq.n	8003a92 <HAL_RCC_OscConfig+0x37e>
 8003ab4:	e014      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab6:	f7fe fd0b 	bl	80024d0 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003abe:	f7fe fd07 	bl	80024d0 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e095      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad4:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ee      	bne.n	8003abe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d105      	bne.n	8003af2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae6:	4b48      	ldr	r3, [pc, #288]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	4a47      	ldr	r2, [pc, #284]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8081 	beq.w	8003bfe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003afc:	4b42      	ldr	r3, [pc, #264]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d061      	beq.n	8003bcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d146      	bne.n	8003b9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b10:	4b3f      	ldr	r3, [pc, #252]	; (8003c10 <HAL_RCC_OscConfig+0x4fc>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fe fcdb 	bl	80024d0 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fe fcd7 	bl	80024d0 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e067      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b30:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f0      	bne.n	8003b1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b44:	d108      	bne.n	8003b58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	492d      	ldr	r1, [pc, #180]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b58:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a19      	ldr	r1, [r3, #32]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	4927      	ldr	r1, [pc, #156]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b70:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <HAL_RCC_OscConfig+0x4fc>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fe fcab 	bl	80024d0 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fe fca7 	bl	80024d0 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e037      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b90:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x46a>
 8003b9c:	e02f      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9e:	4b1c      	ldr	r3, [pc, #112]	; (8003c10 <HAL_RCC_OscConfig+0x4fc>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fc94 	bl	80024d0 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fe fc90 	bl	80024d0 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e020      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x498>
 8003bca:	e018      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e013      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_OscConfig+0x4f4>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40007000 	.word	0x40007000
 8003c10:	42420060 	.word	0x42420060

08003c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0d0      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c28:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d910      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c36:	4b67      	ldr	r3, [pc, #412]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 0207 	bic.w	r2, r3, #7
 8003c3e:	4965      	ldr	r1, [pc, #404]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b63      	ldr	r3, [pc, #396]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b8      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c70:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c88:	4b53      	ldr	r3, [pc, #332]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	494d      	ldr	r1, [pc, #308]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d040      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d115      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e07f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd2:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e073      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e06b      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cf2:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f023 0203 	bic.w	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4936      	ldr	r1, [pc, #216]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d04:	f7fe fbe4 	bl	80024d0 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d0c:	f7fe fbe0 	bl	80024d0 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e053      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 020c 	and.w	r2, r3, #12
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d1eb      	bne.n	8003d0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d34:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d210      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 0207 	bic.w	r2, r3, #7
 8003d4a:	4922      	ldr	r1, [pc, #136]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e032      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4916      	ldr	r1, [pc, #88]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	490e      	ldr	r1, [pc, #56]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003da2:	f000 f821 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003da6:	4601      	mov	r1, r0
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	4a0a      	ldr	r2, [pc, #40]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003db4:	5cd3      	ldrb	r3, [r2, r3]
 8003db6:	fa21 f303 	lsr.w	r3, r1, r3
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <HAL_RCC_ClockConfig+0x1cc>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_ClockConfig+0x1d0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fb42 	bl	800244c <HAL_InitTick>

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40022000 	.word	0x40022000
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	0800455c 	.word	0x0800455c
 8003de0:	20000224 	.word	0x20000224
 8003de4:	20000238 	.word	0x20000238

08003de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	b490      	push	{r4, r7}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dee:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003df0:	1d3c      	adds	r4, r7, #4
 8003df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003df8:	4b28      	ldr	r3, [pc, #160]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e12:	4b23      	ldr	r3, [pc, #140]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d002      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x40>
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d003      	beq.n	8003e2e <HAL_RCC_GetSysClockFreq+0x46>
 8003e26:	e02d      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e28:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e2a:	623b      	str	r3, [r7, #32]
      break;
 8003e2c:	e02d      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	0c9b      	lsrs	r3, r3, #18
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e4c:	4b14      	ldr	r3, [pc, #80]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	0c5b      	lsrs	r3, r3, #17
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e66:	fb02 f203 	mul.w	r2, r2, r3
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
 8003e72:	e004      	b.n	8003e7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e78:	fb02 f303 	mul.w	r3, r2, r3
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	623b      	str	r3, [r7, #32]
      break;
 8003e82:	e002      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e84:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e86:	623b      	str	r3, [r7, #32]
      break;
 8003e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3728      	adds	r7, #40	; 0x28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc90      	pop	{r4, r7}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	08004548 	.word	0x08004548
 8003e9c:	08004558 	.word	0x08004558
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	007a1200 	.word	0x007a1200
 8003ea8:	003d0900 	.word	0x003d0900

08003eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb0:	4b02      	ldr	r3, [pc, #8]	; (8003ebc <HAL_RCC_GetHCLKFreq+0x10>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	20000224 	.word	0x20000224

08003ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ec4:	f7ff fff2 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ec8:	4601      	mov	r1, r0
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4a03      	ldr	r2, [pc, #12]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	0800456c 	.word	0x0800456c

08003ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003eec:	f7ff ffde 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ef0:	4601      	mov	r1, r0
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	0adb      	lsrs	r3, r3, #11
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4a03      	ldr	r2, [pc, #12]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003efe:	5cd3      	ldrb	r3, [r2, r3]
 8003f00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	0800456c 	.word	0x0800456c

08003f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <RCC_Delay+0x34>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <RCC_Delay+0x38>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	0a5b      	lsrs	r3, r3, #9
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f2c:	bf00      	nop
  }
  while (Delay --);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1e5a      	subs	r2, r3, #1
 8003f32:	60fa      	str	r2, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f9      	bne.n	8003f2c <RCC_Delay+0x1c>
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000224 	.word	0x20000224
 8003f48:	10624dd3 	.word	0x10624dd3

08003f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d07d      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6c:	4b4f      	ldr	r3, [pc, #316]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f78:	4b4c      	ldr	r3, [pc, #304]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	4a4b      	ldr	r2, [pc, #300]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f82:	61d3      	str	r3, [r2, #28]
 8003f84:	4b49      	ldr	r3, [pc, #292]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f90:	2301      	movs	r3, #1
 8003f92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f94:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d118      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa0:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a42      	ldr	r2, [pc, #264]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003faa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fac:	f7fe fa90 	bl	80024d0 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb4:	f7fe fa8c 	bl	80024d0 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e06d      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc6:	4b3a      	ldr	r3, [pc, #232]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fd2:	4b36      	ldr	r3, [pc, #216]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d02e      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d027      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff0:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ffa:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004000:	4b2c      	ldr	r3, [pc, #176]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004006:	4a29      	ldr	r2, [pc, #164]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d014      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004016:	f7fe fa5b 	bl	80024d0 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401c:	e00a      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fe fa57 	bl	80024d0 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	; 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d901      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e036      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ee      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004040:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4917      	ldr	r1, [pc, #92]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404e:	4313      	orrs	r3, r2
 8004050:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d105      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	4a13      	ldr	r2, [pc, #76]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004062:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004070:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	490b      	ldr	r1, [pc, #44]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4904      	ldr	r1, [pc, #16]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409c:	4313      	orrs	r3, r2
 800409e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40007000 	.word	0x40007000
 80040b4:	42420440 	.word	0x42420440

080040b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e03f      	b.n	800414a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd fa34 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2224      	movs	r2, #36	; 0x24
 80040e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f90b 	bl	8004318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695a      	ldr	r2, [r3, #20]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b088      	sub	sp, #32
 8004156:	af02      	add	r7, sp, #8
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b20      	cmp	r3, #32
 8004170:	f040 8083 	bne.w	800427a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_UART_Transmit+0x2e>
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e07b      	b.n	800427c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_UART_Transmit+0x40>
 800418e:	2302      	movs	r3, #2
 8004190:	e074      	b.n	800427c <HAL_UART_Transmit+0x12a>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2221      	movs	r2, #33	; 0x21
 80041a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80041a8:	f7fe f992 	bl	80024d0 <HAL_GetTick>
 80041ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	88fa      	ldrh	r2, [r7, #6]
 80041b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041ba:	e042      	b.n	8004242 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d2:	d122      	bne.n	800421a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2200      	movs	r2, #0
 80041dc:	2180      	movs	r1, #128	; 0x80
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f850 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e046      	b.n	800427c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004200:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3302      	adds	r3, #2
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	e017      	b.n	8004242 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	3301      	adds	r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	e013      	b.n	8004242 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	2180      	movs	r1, #128	; 0x80
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f82d 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e023      	b.n	800427c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	60ba      	str	r2, [r7, #8]
 800423a:	781a      	ldrb	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1b7      	bne.n	80041bc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2200      	movs	r2, #0
 8004254:	2140      	movs	r1, #64	; 0x40
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f814 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e00a      	b.n	800427c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	e000      	b.n	800427c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800427a:	2302      	movs	r3, #2
  }
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004294:	e02c      	b.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d028      	beq.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d007      	beq.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042a4:	f7fe f914 	bl	80024d0 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d21d      	bcs.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e00f      	b.n	8004310 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	429a      	cmp	r2, r3
 800430c:	d0c3      	beq.n	8004296 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004352:	f023 030c 	bic.w	r3, r3, #12
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	68f9      	ldr	r1, [r7, #12]
 800435c:	430b      	orrs	r3, r1
 800435e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a52      	ldr	r2, [pc, #328]	; (80044c4 <UART_SetConfig+0x1ac>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d14e      	bne.n	800441e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004380:	f7ff fdb2 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 8004384:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009a      	lsls	r2, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	4a4a      	ldr	r2, [pc, #296]	; (80044c8 <UART_SetConfig+0x1b0>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	0119      	lsls	r1, r3, #4
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009a      	lsls	r2, r3, #2
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043bc:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <UART_SetConfig+0x1b0>)
 80043be:	fba3 0302 	umull	r0, r3, r3, r2
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2064      	movs	r0, #100	; 0x64
 80043c6:	fb00 f303 	mul.w	r3, r0, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	3332      	adds	r3, #50	; 0x32
 80043d0:	4a3d      	ldr	r2, [pc, #244]	; (80044c8 <UART_SetConfig+0x1b0>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043dc:	4419      	add	r1, r3
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009a      	lsls	r2, r3, #2
 80043e8:	441a      	add	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f4:	4b34      	ldr	r3, [pc, #208]	; (80044c8 <UART_SetConfig+0x1b0>)
 80043f6:	fba3 0302 	umull	r0, r3, r3, r2
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2064      	movs	r0, #100	; 0x64
 80043fe:	fb00 f303 	mul.w	r3, r0, r3
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	3332      	adds	r3, #50	; 0x32
 8004408:	4a2f      	ldr	r2, [pc, #188]	; (80044c8 <UART_SetConfig+0x1b0>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	440a      	add	r2, r1
 800441a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800441c:	e04d      	b.n	80044ba <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800441e:	f7ff fd4f 	bl	8003ec0 <HAL_RCC_GetPCLK1Freq>
 8004422:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009a      	lsls	r2, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <UART_SetConfig+0x1b0>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	0119      	lsls	r1, r3, #4
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	009a      	lsls	r2, r3, #2
 800444e:	441a      	add	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	fbb2 f2f3 	udiv	r2, r2, r3
 800445a:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <UART_SetConfig+0x1b0>)
 800445c:	fba3 0302 	umull	r0, r3, r3, r2
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	2064      	movs	r0, #100	; 0x64
 8004464:	fb00 f303 	mul.w	r3, r0, r3
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	3332      	adds	r3, #50	; 0x32
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <UART_SetConfig+0x1b0>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800447a:	4419      	add	r1, r3
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	009a      	lsls	r2, r3, #2
 8004486:	441a      	add	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <UART_SetConfig+0x1b0>)
 8004494:	fba3 0302 	umull	r0, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	2064      	movs	r0, #100	; 0x64
 800449c:	fb00 f303 	mul.w	r3, r0, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	3332      	adds	r3, #50	; 0x32
 80044a6:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <UART_SetConfig+0x1b0>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f003 020f 	and.w	r2, r3, #15
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	440a      	add	r2, r1
 80044b8:	609a      	str	r2, [r3, #8]
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40013800 	.word	0x40013800
 80044c8:	51eb851f 	.word	0x51eb851f

080044cc <__libc_init_array>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	2500      	movs	r5, #0
 80044d0:	4e0c      	ldr	r6, [pc, #48]	; (8004504 <__libc_init_array+0x38>)
 80044d2:	4c0d      	ldr	r4, [pc, #52]	; (8004508 <__libc_init_array+0x3c>)
 80044d4:	1ba4      	subs	r4, r4, r6
 80044d6:	10a4      	asrs	r4, r4, #2
 80044d8:	42a5      	cmp	r5, r4
 80044da:	d109      	bne.n	80044f0 <__libc_init_array+0x24>
 80044dc:	f000 f822 	bl	8004524 <_init>
 80044e0:	2500      	movs	r5, #0
 80044e2:	4e0a      	ldr	r6, [pc, #40]	; (800450c <__libc_init_array+0x40>)
 80044e4:	4c0a      	ldr	r4, [pc, #40]	; (8004510 <__libc_init_array+0x44>)
 80044e6:	1ba4      	subs	r4, r4, r6
 80044e8:	10a4      	asrs	r4, r4, #2
 80044ea:	42a5      	cmp	r5, r4
 80044ec:	d105      	bne.n	80044fa <__libc_init_array+0x2e>
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
 80044f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044f4:	4798      	blx	r3
 80044f6:	3501      	adds	r5, #1
 80044f8:	e7ee      	b.n	80044d8 <__libc_init_array+0xc>
 80044fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044fe:	4798      	blx	r3
 8004500:	3501      	adds	r5, #1
 8004502:	e7f2      	b.n	80044ea <__libc_init_array+0x1e>
 8004504:	08004574 	.word	0x08004574
 8004508:	08004574 	.word	0x08004574
 800450c:	08004574 	.word	0x08004574
 8004510:	08004578 	.word	0x08004578

08004514 <memset>:
 8004514:	4603      	mov	r3, r0
 8004516:	4402      	add	r2, r0
 8004518:	4293      	cmp	r3, r2
 800451a:	d100      	bne.n	800451e <memset+0xa>
 800451c:	4770      	bx	lr
 800451e:	f803 1b01 	strb.w	r1, [r3], #1
 8004522:	e7f9      	b.n	8004518 <memset+0x4>

08004524 <_init>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr

08004530 <_fini>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr
